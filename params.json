{"name":"wewut-code","tagline":"","body":"# Acknowledgments\r\n# Unit Testing, a First Example \r\n```java\r\npublic class CustomerTest {\r\n  Customer john, steve, pat, david;\r\n  String johnName = \"John\",\r\n    steveName = \"Steve\",\r\n    patName = \"Pat\",\r\n    davidName = \"David\";\r\n  Customer[] customers;\r\n\r\n  @Before\r\n  public void setup() {\r\n    david = ObjectMother\r\n      .customerWithNoRentals(\r\n        davidName);\r\n    john = ObjectMother\r\n      .customerWithOneNewRelease(\r\n        johnName);\r\n    pat = ObjectMother\r\n      .customerWithOneOfEachRentalType(\r\n        patName);\r\n    steve = ObjectMother\r\n      .customerWithOneNewReleaseAndOneRegular(\r\n        steveName);\r\n    customers =\r\n      new Customer[]\r\n      { david, john, steve, pat};\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      davidName, david.getName());\r\n    assertEquals(\r\n      johnName, john.getName());\r\n    assertEquals(\r\n      steveName, steve.getName());\r\n    assertEquals(\r\n      patName, pat.getName());\r\n  }\r\n\r\n  @Test\r\n  public void statement() {\r\n    for (int i=0; i<customers.length; i++) {\r\n      assertEquals(\r\n        expStatement(\r\n          \"Rental record for %s\\n\" +\r\n          \"%sAmount owed is %s\\n\"  +\r\n          \"You earned %s frequent \" +\r\n          \"renter points\",\r\n          customers[i],\r\n          rentalInfo(\r\n            \"\\t\", \"\",\r\n            customers[i].getRentals())),\r\n        customers[i].statement());\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void htmlStatement() {\r\n    for (int i=0; i<customers.length; i++) {\r\n      assertEquals(\r\n        expStatement(\r\n          \"<h1>Rental record for \" +\r\n          \"<em>%s</em></h1>\\n%s\" +\r\n          \"<p>Amount owed is <em>%s</em>\" +\r\n          \"</p>\\n<p>You earned <em>%s\" +\r\n          \" frequent renter points</em></p>\",\r\n          customers[i],\r\n          rentalInfo(\r\n            \"<p>\", \"</p>\",\r\n            customers[i].getRentals())),\r\n        customers[i].htmlStatement());\r\n    }\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    ObjectMother\r\n      .customerWithNoRentals(\"Bob\")\r\n      .addRental(\r\n        new Rental(\r\n          new Movie(\"Crazy, Stupid, Love.\",\r\n                    Movie.Type.UNKNOWN),\r\n          4));\r\n  }\r\n```\r\n\r\n```java\r\n  public static String rentalInfo(\r\n    String startsWith,\r\n    String endsWith,\r\n    List<Rental> rentals) {\r\n    String result = \"\";\r\n    for (Rental rental : rentals)\r\n      result += String.format(\r\n        \"%s%s\\t%s%s\\n\",\r\n        startsWith,\r\n        rental.getMovie().getTitle(),\r\n        rental.getCharge(),\r\n        endsWith);\r\n    return result;\r\n  }\r\n\r\n  public static String expStatement(\r\n    String formatStr,\r\n    Customer customer,\r\n    String rentalInfo) {\r\n    return String.format(\r\n      formatStr,\r\n      customer.getName(),\r\n      rentalInfo,\r\n      customer.getTotalCharge(),\r\n      customer.getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class ObjectMother {\r\n  public static Customer\r\n  customerWithOneOfEachRentalType(\r\n    String name) {\r\n    Customer result =\r\n      customerWithOneNewReleaseAndOneRegular(\r\n        name);\r\n    result.addRental(\r\n      new Rental(\r\n        new Movie(\"Lion King\", CHILDREN), 3));\r\n    return result;\r\n  }\r\n\r\n  public static Customer\r\n  customerWithOneNewReleaseAndOneRegular(\r\n    String n) {\r\n    Customer result =\r\n      customerWithOneNewRelease(n);\r\n    result.addRental(\r\n      new Rental(\r\n        new Movie(\"Scarface\", REGULAR), 3));\r\n    return result;\r\n  }\r\n```\r\n\r\n```java\r\n  public static Customer\r\n  customerWithOneNewRelease(\r\n    String name) {\r\n    Customer result =\r\n      customerWithNoRentals(name);\r\n    result.addRental(\r\n      new Rental(\r\n        new Movie(\r\n          \"Godfather 4\", NEW_RELEASE), 3));\r\n    return result;\r\n  }\r\n\r\n  public static Customer\r\n  customerWithNoRentals(String name) {\r\n    return new Customer(name);\r\n  }\r\n}\r\n```\r\n##  Thoughts on our Tests\r\n## The Domain Code\r\n```java\r\npublic class Customer {\r\n\r\n  private String name;\r\n  private List<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  public Customer(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public String getName() {\r\n    return name;\r\n  }\r\n\r\n  public List<Rental> getRentals() {\r\n    return rentals;\r\n  }\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n```\r\n\r\n```java\r\n  public String statement() {\r\n    String result =\r\n      \"Rental record for \" + getName() + \"\\n\";\r\n    for (Rental rental : rentals)\r\n      result +=\r\n        \"\\t\" + rental.getLineItem() + \"\\n\";\r\n    result +=\r\n      \"Amount owed is \" + getTotalCharge() +\r\n      \"\\n\" + \"You earned \" +\r\n      getTotalPoints() +\r\n      \" frequent renter points\";\r\n    return result;\r\n  }\r\n\r\n  public String htmlStatement() {\r\n    String result =\r\n      \"<h1>Rental record for <em>\" +\r\n      getName() + \"</em></h1>\\n\";\r\n    for (Rental rental : rentals)\r\n      result += \"<p>\" + rental.getLineItem() +\r\n        \"</p>\\n\";\r\n    result +=\r\n      \"<p>Amount owed is <em>\" +\r\n      getTotalCharge() + \"</em></p>\\n\" +\r\n      \"<p>You earned <em>\" +\r\n      getTotalPoints() +\r\n      \" frequent renter points</em></p>\";\r\n    return result;\r\n\r\n  }\r\n```\r\n\r\n```java\r\n  public double getTotalCharge() {\r\n    double total = 0;\r\n    for (Rental rental : rentals)\r\n      total += rental.getCharge();\r\n    return total;\r\n  }\r\n\r\n  public int getTotalPoints() {\r\n    int total = 0;\r\n    for (Rental rental : rentals)\r\n      total += rental.getPoints();\r\n    return total;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Rental {\r\n\r\n  Movie movie;\r\n  private int daysRented;\r\n\r\n  public Rental(Movie movie, int daysRented) {\r\n    this.movie = movie;\r\n    this.daysRented = daysRented;\r\n  }\r\n\r\n  public Movie getMovie() {\r\n    return movie;\r\n  }\r\n\r\n  public int getDaysRented() {\r\n    return daysRented;\r\n  }\r\n\r\n  public double getCharge() {\r\n    return movie.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints() {\r\n    return movie.getPoints(daysRented);\r\n  }\r\n\r\n  public String getLineItem() {\r\n    return\r\n      movie.getTitle() + \" \" + getCharge();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Movie {\r\n\r\n  public enum Type {\r\n    REGULAR, NEW_RELEASE, CHILDREN, UNKNOWN;\r\n  }\r\n\r\n  private String title;\r\n  Price price;\r\n\r\n  public Movie(\r\n    String title, Movie.Type priceCode) {\r\n    this.title = title;\r\n    setPriceCode(priceCode);\r\n  }\r\n\r\n  public String getTitle() {\r\n    return title;\r\n  }\r\n```\r\n\r\n```java\r\n  private void setPriceCode(\r\n    Movie.Type priceCode) {\r\n    switch (priceCode) {\r\n    case CHILDREN:\r\n      price = new ChildrensPrice();\r\n      break;\r\n    case NEW_RELEASE:\r\n      price = new NewReleasePrice();\r\n      break;\r\n    case REGULAR:\r\n      price = new RegularPrice();\r\n      break;\r\n    default:\r\n      throw new IllegalArgumentException(\r\n        \"invalid price code\");\r\n    }\r\n  }\r\n\r\n  public double getCharge(int daysRented) {\r\n    return price.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints(int daysRented) {\r\n    return price.getPoints(daysRented);\r\n  }\r\n}\r\n```\r\n```java\r\npublic abstract class Price {\r\n  abstract double getCharge(int daysRented);\r\n\r\n  int getPoints(int daysRented) {\r\n    return 1;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class ChildrensPrice extends Price {\r\n  @Override\r\n  double getCharge(int daysRented) {\r\n    double amount = 1.5;\r\n    if (daysRented > 3)\r\n      amount += (daysRented - 3) * 1.5;\r\n    return amount;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RegularPrice extends Price {\r\n  @Override\r\n  public double getCharge(int daysRented) {\r\n    double amount = 2;\r\n    if (daysRented > 2)\r\n      amount += (daysRented - 2) * 1.5;\r\n    return amount;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class NewReleasePrice extends Price {\r\n  @Override\r\n  public double getCharge(int daysRented) {\r\n    return daysRented * 3;\r\n  }\r\n\r\n  @Override\r\n  int getPoints(int daysRented) {\r\n    if (daysRented > 1)\r\n      return 2;\r\n    return 1;\r\n  }\r\n}\r\n```\r\n## Moving Towards Readability\r\n## Replace Loop with Individual Tests\r\n```java\r\npublic class CustomerTest {\r\n  Customer john, steve, pat, david;\r\n  String johnName = \"John\",\r\n    steveName = \"Steve\",\r\n    patName = \"Pat\",\r\n    davidName = \"David\";\r\n  Customer[] customers;\r\n\r\n  @Before\r\n  public void setup() {\r\n    david = ObjectMother\r\n      .customerWithNoRentals(davidName);\r\n    john = ObjectMother\r\n      .customerWithOneNewRelease(johnName);\r\n    pat = ObjectMother\r\n      .customerWithOneOfEachRentalType(\r\n        patName);\r\n    steve = ObjectMother\r\n      .customerWithOneNewReleaseAndOneRegular(\r\n        steveName);\r\n    customers = new Customer[] {\r\n      david, john, steve, pat };\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n  @Test\r\n  public void davidStatement() {\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%sAmount \" +\r\n        \"owed is %s\\nYou earned %s \" +\r\n        \"frequent renter points\",\r\n        david,\r\n        rentalInfo(\r\n          \"\\t\", \"\", david.getRentals())),\r\n      david.statement());\r\n  }\r\n\r\n  @Test\r\n  public void johnStatement() {\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%sAmount \" +\r\n        \"owed is %s\\nYou earned %s \" +\r\n        \"frequent renter points\",\r\n        john,\r\n        rentalInfo(\r\n          \"\\t\", \"\", john.getRentals())),\r\n      john.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void patStatement() {\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%sAmount \" +\r\n        \"owed is %s\\nYou earned %s \" +\r\n        \"frequent renter points\",\r\n        pat,\r\n        rentalInfo(\r\n          \"\\t\", \"\", pat.getRentals())),\r\n      pat.statement());\r\n  }\r\n\r\n  @Test\r\n  public void steveStatement() {\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%s\" +\r\n        \"Amount owed is %s\\nYou earned %s \" +\r\n        \"frequent renter points\",\r\n        steve,\r\n        rentalInfo(\r\n          \"\\t\", \"\", steve.getRentals())),\r\n      steve.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n\r\n  public static String rentalInfo(\r\n    String startsWith,\r\n    String endsWith,\r\n    List<Rental> rentals) {\r\n    String result = \"\";\r\n    for (Rental rental : rentals)\r\n      result += String.format(\r\n        \"%s%s\\t%s%s\\n\",\r\n        startsWith,\r\n        rental.getMovie().getTitle(),\r\n        rental.getCharge(),\r\n        endsWith);\r\n    return result;\r\n  }\r\n\r\n  public static String expStatement(\r\n    String formatStr,\r\n    Customer customer,\r\n    String rentalInfo) {\r\n    return String.format(\r\n      formatStr,\r\n      customer.getName(),\r\n      rentalInfo,\r\n      customer.getTotalCharge(),\r\n      customer.getTotalPoints());\r\n  }\r\n}\r\n```\r\n## Expect Literals\r\n```java\r\npublic class CustomerTest {\r\n  Customer john, steve, pat, david;\r\n  String johnName = \"John\",\r\n    steveName = \"Steve\",\r\n    patName = \"Pat\",\r\n    davidName = \"David\";\r\n  Customer[] customers;\r\n\r\n  @Before\r\n  public void setup() {\r\n    david = ObjectMother\r\n      .customerWithNoRentals(davidName);\r\n    john = ObjectMother\r\n      .customerWithOneNewRelease(johnName);\r\n    pat = ObjectMother\r\n      .customerWithOneOfEachRentalType(\r\n        patName);\r\n    steve = ObjectMother\r\n      .customerWithOneNewReleaseAndOneRegular(\r\n        steveName);\r\n    customers = new Customer[] {\r\n      david, john, steve, pat };\r\n  }\r\n\r\n  @Test\r\n  public void davidStatement() {\r\n    assertEquals(\r\n      \r\n      \"Rental record for David\\nAmount \" +\r\n      \"owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      \r\n      david.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void johnStatement() {\r\n    assertEquals(\r\n      \r\n      \"Rental record for John\\n\\t\" +\r\n      \"Godfather 4\\t9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      \r\n      john.statement());\r\n  }\r\n\r\n  @Test\r\n  public void patStatement() {\r\n    assertEquals(\r\n      \r\n      \"Rental record for Pat\\n\\t\" +\r\n      \"Godfather 4\\t9.0\\n\" +\r\n      \"\\tScarface\\t3.5\\n\" +\r\n      \"\\tLion King\\t1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      \r\n      pat.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void steveStatement() {\r\n    assertEquals(\r\n      \r\n      \"Rental record for Steve\\n\\t\" +\r\n      \"Godfather 4\\t9.0\\n\" +\r\n      \"\\tScarface\\t3.5\\n\" +\r\n      \"Amount owed is 12.5\\n\" +\r\n      \"You earned 3 frequent renter points\",\r\n      \r\n      steve.statement());\r\n  }\r\n}\r\n```\r\n## Inline Setup\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for David\\nAmount \" +\r\n      \"owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      \r\n      ObjectMother\r\n      .customerWithNoRentals(\r\n        \"David\").statement());\r\n    \r\n  }\r\n\r\n  @Test\r\n  public void oneNewReleaseStatement() {\r\n    assertEquals(\r\n      \"Rental record for John\\n\\t\" +\r\n      \"Godfather 4 9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      \r\n      ObjectMother\r\n      .customerWithOneNewRelease(\r\n        \"John\").statement());\r\n    \r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\\t\" +\r\n      \"Godfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\\tLion King 1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      \r\n      ObjectMother\r\n      .customerWithOneOfEachRentalType(\r\n        \"Pat\").statement());\r\n    \r\n  }\r\n\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularStatement() {\r\n    assertEquals(\r\n      \"Rental record for Steve\\n\\t\" +\r\n      \"Godfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"Amount owed is 12.5\\n\" +\r\n      \"You earned 3 frequent renter points\",\r\n      \r\n      ObjectMother\r\n      .customerWithOneNewReleaseAndOneRegular(\r\n        \"Steve\").statement());\r\n    \r\n  }\r\n}\r\n```\r\n## Replace ObjectMother with DataBuilder\r\n```java\r\npublic class a {\r\n  public static CustomerBuilder customer =\r\n    new CustomerBuilder();\r\n  public static RentalBuilder rental =\r\n    new RentalBuilder();\r\n  public static MovieBuilder movie =\r\n    new MovieBuilder();\r\n\r\n  public static class CustomerBuilder {\r\n    Rental[] rentals;\r\n    String name;\r\n\r\n    CustomerBuilder() {\r\n      this(\"Jim\", new Rental[0]);\r\n    }\r\n\r\n    CustomerBuilder(\r\n      String name, Rental[] rentals) {\r\n      this.name = name;\r\n      this.rentals = rentals;\r\n    }\r\n\r\n    public CustomerBuilder w(\r\n      RentalBuilder... builders) {\r\n      Rental[] rentals =\r\n        new Rental[builders.length];\r\n      for (int i=0; i<builders.length; i++) {\r\n        rentals[i] = builders[i].build();\r\n      }\r\n      return\r\n        new CustomerBuilder(name, rentals);\r\n    }\r\n\r\n    public CustomerBuilder w(String name) {\r\n      return\r\n        new CustomerBuilder(name, rentals);\r\n    }\r\n\r\n    public Customer build() {\r\n      Customer result = new Customer(name);\r\n      for (Rental rental : rentals) {\r\n        result.addRental(rental);\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  public static class RentalBuilder {\r\n    final Movie movie;\r\n    final int days;\r\n\r\n    RentalBuilder() {\r\n      this(new MovieBuilder().build(), 3);\r\n    }\r\n\r\n    RentalBuilder(Movie movie, int days) {\r\n      this.movie = movie;\r\n      this.days = days;\r\n    }\r\n\r\n    public RentalBuilder w(\r\n      MovieBuilder movie) {\r\n      return\r\n        new RentalBuilder(\r\n          movie.build(), days);\r\n    }\r\n\r\n    public Rental build() {\r\n      return new Rental(movie, days);\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  public static class MovieBuilder {\r\n    final String name;\r\n    final Movie.Type type;\r\n\r\n    MovieBuilder() {\r\n      this(\"Godfather 4\",\r\n           Movie.Type.NEW_RELEASE);\r\n    }\r\n\r\n    MovieBuilder(\r\n      String name, Movie.Type type) {\r\n      this.name = name;\r\n      this.type = type;\r\n    }\r\n\r\n    public MovieBuilder w(Movie.Type type) {\r\n      return new MovieBuilder(name, type);\r\n    }\r\n\r\n    public MovieBuilder w(String name) {\r\n      return new MovieBuilder(name, type);\r\n    }\r\n\r\n    public Movie build() {\r\n      return new Movie(name, type);\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for David\\nAmount \" +\r\n      \"owed is 0.0\\nYou earned 0 frequent \" +\r\n      \"renter points\",\r\n      \r\n      a.customer.w(\r\n        \"David\").build().statement());\r\n    \r\n  }\r\n\r\n  @Test\r\n  public void oneNewReleaseStatement() {\r\n    assertEquals(\r\n      \"Rental record for John\\n\\t\" +\r\n      \"Godfather 4 9.0\\nAmount owed is \" +\r\n      \"9.0\\nYou earned 2 frequent renter \" +\r\n      \"points\",\r\n      \r\n      a.customer.w(\"John\").w(\r\n        a.rental.w(\r\n          a.movie.w(NEW_RELEASE))).build()\r\n      \r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\\t\" +\r\n      \"Godfather 4 9.0\\n\\tScarface 3.5\\n\" +\r\n      \"\\tLion King 1.5\\nAmount owed is \" +\r\n      \"14.0\\nYou earned 4 frequent renter \" +\r\n      \"points\",\r\n      \r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN))).build()\r\n      \r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularStatement() {\r\n    assertEquals(\r\n      \"Rental record for Steve\\n\\t\" +\r\n      \"Godfather 4 9.0\\n\\tScarface 3.5\\n\" +\r\n      \"Amount owed is 12.5\\nYou earned 3 \" +\r\n      \"frequent renter points\",\r\n      \r\n      a.customer.w(\"Steve\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\r\n            \"Scarface\").w(REGULAR))).build()\r\n      \r\n      .statement());\r\n  }\r\n}\r\n```\r\n## Comparing the Results\r\n```java\r\npublic class CustomerTest {\r\n  Customer john, steve, pat, david;\r\n  String johnName = \"John\",\r\n    steveName = \"Steve\",\r\n    patName = \"Pat\",\r\n    davidName = \"David\";\r\n  Customer[] customers;\r\n\r\n  @Before\r\n  public void setup() {\r\n    david = ObjectMother\r\n      .customerWithNoRentals(\r\n        davidName);\r\n    john = ObjectMother\r\n      .customerWithOneNewRelease(\r\n        johnName);\r\n    pat = ObjectMother\r\n      .customerWithOneOfEachRentalType(\r\n        patName);\r\n    steve = ObjectMother\r\n      .customerWithOneNewReleaseAndOneRegular(\r\n        steveName);\r\n    customers =\r\n      new Customer[]\r\n      { david, john, steve, pat};\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      davidName, david.getName());\r\n    assertEquals(\r\n      johnName, john.getName());\r\n    assertEquals(\r\n      steveName, steve.getName());\r\n    assertEquals(\r\n      patName, pat.getName());\r\n  }\r\n\r\n  @Test\r\n  public void statement() {\r\n    for (int i=0; i<customers.length; i++) {\r\n      assertEquals(\r\n        expStatement(\r\n          \"Rental record for %s\\n\" +\r\n          \"%sAmount owed is %s\\n\"  +\r\n          \"You earned %s frequent \" +\r\n          \"renter points\",\r\n          customers[i],\r\n          rentalInfo(\r\n            \"\\t\", \"\",\r\n            customers[i].getRentals())),\r\n        customers[i].statement());\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void htmlStatement() {\r\n    for (int i=0; i<customers.length; i++) {\r\n      assertEquals(\r\n        expStatement(\r\n          \"<h1>Rental record for \" +\r\n          \"<em>%s</em></h1>\\n%s\" +\r\n          \"<p>Amount owed is <em>%s</em>\" +\r\n          \"</p>\\n<p>You earned <em>%s\" +\r\n          \" frequent renter points</em></p>\",\r\n          customers[i],\r\n          rentalInfo(\r\n            \"<p>\", \"</p>\",\r\n            customers[i].getRentals())),\r\n        customers[i].htmlStatement());\r\n    }\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    ObjectMother\r\n      .customerWithNoRentals(\"Bob\")\r\n      .addRental(\r\n        new Rental(\r\n          new Movie(\"Crazy, Stupid, Love.\",\r\n                    Movie.Type.UNKNOWN),\r\n          4));\r\n  }\r\n```\r\n\r\n```java\r\n  public static String rentalInfo(\r\n    String startsWith,\r\n    String endsWith,\r\n    List<Rental> rentals) {\r\n    String result = \"\";\r\n    for (Rental rental : rentals)\r\n      result += String.format(\r\n        \"%s%s\\t%s%s\\n\",\r\n        startsWith,\r\n        rental.getMovie().getTitle(),\r\n        rental.getCharge(),\r\n        endsWith);\r\n    return result;\r\n  }\r\n\r\n  public static String expStatement(\r\n    String formatStr,\r\n    Customer customer,\r\n    String rentalInfo) {\r\n    return String.format(\r\n      formatStr,\r\n      customer.getName(),\r\n      rentalInfo,\r\n      customer.getTotalCharge(),\r\n      customer.getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"John\",\r\n      a.customer.w(\r\n        \"John\").build().getName());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for David\\nAmount \" +\r\n      \"owed is 0.0\\nYou earned 0 frequent \" +\r\n      \"renter points\",\r\n      a.customer.w(\r\n        \"David\").build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneNewReleaseStatement() {\r\n    assertEquals(\r\n      \"Rental record for John\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      a.customer.w(\"John\").w(\r\n        a.rental.w(\r\n          a.movie.w(\r\n            NEW_RELEASE))).build()\r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"\\tLion King 1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(REGULAR)),\r\n        a.rental.w(\r\n          a.movie.w(\"Lion King\").w(\r\n            CHILDREN))).build().statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularStatement() {\r\n    assertEquals(\r\n      \"Rental record for Steve\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"Amount owed is 12.5\\n\" +\r\n      \"You earned 3 frequent renter points\",\r\n      a.customer.w(\"Steve\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(\r\n            REGULAR))).build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>David\" +\r\n      \"</em></h1>\\n<p>Amount owed is <em>\" +\r\n      \"0.0</em></p>\\n<p>You earned <em>0 \" +\r\n      \"frequent renter points</em></p>\",\r\n      a.customer.w(\r\n        \"David\").build().htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void oneNewReleaseHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>John</em>\" +\r\n      \"</h1>\\n<p>Godfather 4 9.0</p>\\n\" +\r\n      \"<p>Amount owed is <em>9.0</em></p>\" +\r\n      \"\\n<p>You earned <em>2 frequent \" +\r\n      \"renter points</em></p>\",\r\n      a.customer.w(\"John\").w(\r\n        a.rental.w(\r\n          a.movie.w(\r\n            NEW_RELEASE))).build()\r\n      .htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Pat</em>\" +\r\n      \"</h1>\\n<p>Godfather 4 9.0</p>\\n\" +\r\n      \"<p>Scarface 3.5</p>\\n<p>Lion King\" +\r\n      \" 1.5</p>\\n<p>Amount owed is <em>\" +\r\n      \"14.0</em></p>\\n<p>You earned <em>\" +\r\n      \"4 frequent renter points</em></p>\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(REGULAR)),\r\n        a.rental.w(\r\n          a.movie.w(\"Lion King\").w(\r\n            CHILDREN))).build()\r\n      .htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Steve\" +\r\n      \"</em></h1>\\n<p>Godfather 4 9.0</p>\" +\r\n      \"\\n<p>Scarface 3.5</p>\\n<p>Amount \" +\r\n      \"owed is <em>12.5</em></p>\\n<p>\" +\r\n      \"You earned <em>3 frequent renter \" +\r\n      \"points</em></p>\",\r\n      a.customer.w(\"Steve\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(\r\n            REGULAR))).build()\r\n      .htmlStatement());\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.customer.w(\r\n      a.rental.w(\r\n        a.movie.w(UNKNOWN))).build();\r\n  }\r\n}\r\n```\r\n## Final Thoughts on our Tests\r\n# Motivators\r\n### Validate the System\r\n#### Common motivators that would be a subset of Validate the System\r\n### Code Coverage\r\n### Enable Refactoring\r\n### Document the Behavior of the System\r\n### Your Manager Told You To\r\n### Test Driven Development\r\n#### Common motivators that would be a subset of TDD\r\n### Customer Acceptance\r\n### Ping Pong Pair-Programming\r\n### What Motivates You (or Your Team)\r\n# Types of Tests \r\n### Strongly Recommended Reference Material\r\n## State Verification \r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void rentalIsStartedIfInStore() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = a.store.w(movie).build();\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    assertEquals(\r\n      0, store.getAvailability(movie));\r\n  }\r\n\r\n  @Test\r\n  public void\r\n  rentalDoesNotStartIfNotAvailable() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental = a.rental.build();\r\n    Store store = a.store.build();\r\n    rental.start(store);\r\n    assertFalse(rental.isStarted());\r\n    assertEquals(\r\n      0, store.getAvailability(movie));\r\n  }\r\n}\r\n```\r\n## Behavior Verification \r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void rentalIsStartedIfInStore() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    when(store.getAvailability(movie))\r\n      .thenReturn(1);\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    verify(store).remove(movie);\r\n  }\r\n\r\n  @Test\r\n  public void\r\n  rentalDoesNotStartIfNotAvailable() {\r\n    Rental rental = a.rental.build();\r\n    Store store = mock(Store.class);\r\n    rental.start(store);\r\n    assertFalse(rental.isStarted());\r\n    verify(\r\n      store, never()).remove(\r\n        any(Movie.class));\r\n  }\r\n}\r\n```\r\n### Picking a Side\r\n## Unit Test\r\n## Solitary Unit Test \r\n## Sociable Unit Test \r\n## Continuing with Examples From Chapter 1\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"John\",\r\n      a.customer.w(\r\n        \"John\").build().getName());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for David\\nAmount\" +\r\n      \" owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        \"David\").build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneNewReleaseStatement() {\r\n    assertEquals(\r\n      \"Rental record for John\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      a.customer.w(\"John\").w(\r\n        a.rental.w(\r\n          a.movie.w(\r\n            NEW_RELEASE))).build()\r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"\\tLion King 1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(REGULAR)),\r\n        a.rental.w(\r\n          a.movie.w(\r\n            \"Lion King\").w(\r\n              CHILDREN))).build()\r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularStatement() {\r\n    assertEquals(\r\n      \"Rental record for Steve\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"Amount owed is 12.5\\n\" +\r\n      \"You earned 3 frequent renter points\",\r\n      a.customer.w(\"Steve\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(\r\n          a.movie.w(\"Scarface\").w(\r\n            REGULAR))).build()\r\n      .statement());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>David\" +\r\n      \"</em></h1>\\n<p>Amount owed is \" +\r\n      \"<em>0.0</em></p>\\n<p>\" +\r\n      \"You earned <em>0 frequent renter \" +\r\n      \"points</em></p>\",\r\n      a.customer.w(\r\n        \"David\").build().htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void oneNewReleaseHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>John</em>\" +\r\n      \"</h1>\\n<p>Godfather 4 9.0</p>\\n\" +\r\n      \"<p>Amount owed is <em>9.0</em></p>\" +\r\n      \"\\n<p>You earned <em>2 frequent \" +\r\n      \"renter points</em></p>\",\r\n      a.customer.w(\"John\").w(\r\n        a.rental.w(\r\n          a.movie.w(NEW_RELEASE))).build()\r\n      .htmlStatement());\r\n  }\r\n\r\n  @Test\r\n  public void allRentalTypesHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Pat</em>\" +\r\n      \"</h1>\\n<p>Godfather 4 9.0</p>\\n<p>\" +\r\n      \"Scarface 3.5</p>\\n<p>Lion King 1.5\" +\r\n      \"</p>\\n<p>Amount owed is <em>14.0\" +\r\n      \"</em></p>\\n<p>You earned <em>4 \" +\r\n      \"frequent renter points</em></p>\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN))).build()\r\n      .htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  newReleaseAndRegularHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Steve\" +\r\n      \"</em></h1>\\n<p>Godfather 4 9.0</p>\" +\r\n      \"\\n<p>Scarface 3.5</p>\\n<p>Amount \" +\r\n      \"owed is <em>12.5</em></p>\\n<p>You \" +\r\n      \"earned <em>3 frequent renter points\" +\r\n      \"</em></p>\",\r\n      a.customer.w(\"Steve\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR))).build()\r\n      .htmlStatement());\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.customer.w(\r\n      a.rental.w(\r\n        a.movie.w(UNKNOWN))).build();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.movie.w(UNKNOWN).build();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\nAmount owed\" +\r\n      \" is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        \r\n        mock(Rental.class)).build()\r\n      \r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\t\" +\r\n      \"null\\n\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        \r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      \r\n      .statement());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsCharge() {\r\n    assertEquals(\r\n      0.0,\r\n      a.customer.build().getTotalCharge(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsCharge() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getCharge()).thenReturn(2.0);\r\n    assertEquals(\r\n      4.0,\r\n      a.customer.w(\r\n        rental,\r\n        rental).build().getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void threeRentalsCharge() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getCharge()).thenReturn(2.0);\r\n    assertEquals(\r\n      6.0,\r\n      a.customer.w(\r\n        rental,\r\n        rental,\r\n        rental).build().getTotalCharge(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsPoints() {\r\n    assertEquals(\r\n      0,\r\n      a.customer.build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints()).thenReturn(2);\r\n    assertEquals(\r\n      4,\r\n      a.customer.w(\r\n        rental,\r\n        rental).build().getTotalPoints());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void threeRentalsPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints()).thenReturn(2);\r\n    assertEquals(\r\n      6,\r\n      a.customer.w(\r\n        rental,\r\n        rental,\r\n        rental).build().getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4),\r\n      0);\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForNewRelease() {\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      6.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      9.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(3),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForRegular() {\r\n    assertEquals(\r\n      2.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      2.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      3.5,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      5.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(4),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getPointsForChildrens() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        CHILDREN).build().getPoints(1));\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        CHILDREN).build().getPoints(2));\r\n  }\r\n\r\n  @Test\r\n  public void getPointsForNewRelease() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(1));\r\n    assertEquals(\r\n      2,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(2));\r\n    assertEquals(\r\n      2,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(3));\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getPointsForRegular() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        REGULAR).build().getPoints(1));\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        REGULAR).build().getPoints(2));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"\\tLion King 1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN)))\r\n      .build().statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for \" +\r\n      \"<em>Pat</em></h1>\\n\" +\r\n      \"<p>Godfather 4 9.0</p>\\n\" +\r\n      \"<p>Scarface 3.5</p>\\n\" +\r\n      \"<p>Lion King 1.5</p>\\n\" +\r\n      \"<p>Amount owed is \" +\r\n      \"<em>14.0</em></p>\\n<p>\" +\r\n      \"You earned <em>4 frequent \" +\r\n      \"renter points</em></p>\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN)))\r\n      .build().htmlStatement());\r\n  }\r\n}\r\n```\r\n## Final Thoughts, Again\r\n### The Failure\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"John\",\r\n      a.customer.w(\r\n        \"John\").build().getName());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\nAmount owed\" +\r\n      \" is 0.0\\nYou earned 0 frequent \" +\r\n      \"renter points\",\r\n      a.customer.build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        mock(Rental.class)).build()\r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\tnull\\n\" +\r\n      \"\\tnull\\nAmount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .statement());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Jim</em>\" +\r\n      \"</h1>\\n<p>Amount owed is <em>0.0\" +\r\n      \"</em></p>\\n<p>You earned <em>0 \" +\r\n      \"frequent renter points</em></p>\",\r\n      a.customer.build().htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void oneRentalHtmlStatement() {\r\n    Rental rental = mock(Rental.class);\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Jim</em>\" +\r\n      \"</h1>\\n<p>null</p>\\n<p>Amount owed \" +\r\n      \"is <em>0.0</em></p>\\n<p>You earned \" +\r\n      \"<em>0 frequent renter points</em>\" +\r\n      \"</p>\",\r\n      a.customer.w(\r\n        mock(Rental.class)).build()\r\n      .htmlStatement());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Jim</em>\" +\r\n      \"</h1>\\n<p>null</p>\\n<p>null</p>\\n\" +\r\n      \"<p>Amount owed is <em>0.0</em></p>\" +\r\n      \"\\n<p>You earned <em>0 frequent\" +\r\n      \" renter points</em></p>\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .htmlStatement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void noRentalsCharge() {\r\n    assertEquals(\r\n      0.0,\r\n      a.customer.build().getTotalCharge(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsCharge() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getCharge()).thenReturn(2.0);\r\n    assertEquals(\r\n      6.0,\r\n      a.customer.w(\r\n        rental,\r\n        rental).build().getTotalCharge(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void threeRentalsCharge() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getCharge()).thenReturn(2.0);\r\n    assertEquals(\r\n      6.0,\r\n      a.customer.w(\r\n        rental,\r\n        rental,\r\n        rental).build().getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void noRentalsPoints() {\r\n    assertEquals(\r\n      0,\r\n      a.customer.build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints()).thenReturn(2);\r\n    assertEquals(\r\n      4,\r\n      a.customer.w(\r\n        rental,\r\n        rental).build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void threeRentalsPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints()).thenReturn(2);\r\n    assertEquals(\r\n      6,\r\n      a.customer.w(\r\n        rental,\r\n        rental,\r\n        rental).build().getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void allRentalTypesStatement() {\r\n    assertEquals(\r\n      \"Rental record for Pat\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tScarface 3.5\\n\" +\r\n      \"\\tLion King 1.5\\n\" +\r\n      \"Amount owed is 14.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN)))\r\n      .build().statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void allRentalTypesHtmlStatement() {\r\n    assertEquals(\r\n      \"<h1>Rental record for <em>Pat\" +\r\n      \"</em></h1>\\n\" +\r\n      \"<p>Godfather 4 9.0</p>\\n\" +\r\n      \"<p>Scarface 3.5</p>\\n\" +\r\n      \"<p>Lion King 1.5</p>\\n\" +\r\n      \"<p>Amount owed is \" +\r\n      \"<em>14.0</em></p>\\n<p>\" +\r\n      \"You earned <em>4 \" +\r\n      \"frequent renter points</em></p>\",\r\n      a.customer.w(\"Pat\").w(\r\n        a.rental.w(a.movie.w(NEW_RELEASE)),\r\n        a.rental.w(a.movie.w(\"Scarface\").w(\r\n                     REGULAR)),\r\n        a.rental.w(a.movie.w(\"Lion King\").w(\r\n                     CHILDREN)))\r\n      .build().htmlStatement());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Customer {\r\n\r\n  private String name;\r\n  private List<Rental> rentals\r\n  = new ArrayList<Rental>();\r\n\r\n  public Customer(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public String getName() {\r\n    return name;\r\n  }\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n\r\n  public String statement() {\r\n    String result =\r\n      \"Rental record for \" +\r\n      getName() + \"\\n\";\r\n    for (Rental rental : rentals)\r\n      result +=\r\n        \"\\t\" + rental.getLineItem() + \"\\n\";\r\n    result += \"Amount owed is \" +\r\n      getTotalCharge() + \"\\n\" +\r\n      \"You earned \" + getTotalPoints() +\r\n      \" frequent renter points\";\r\n    return result;\r\n  }\r\n```\r\n\r\n```java\r\n  public String htmlStatement() {\r\n    String result =\r\n      \"<h1>Rental record for <em>\" +\r\n      getName() + \"</em></h1>\\n\";\r\n    for (Rental rental : rentals)\r\n      result +=\r\n        \"<p>\" + rental.getLineItem() +\r\n        \"</p>\\n\";\r\n    result +=\r\n      \"<p>Amount owed is <em>\" +\r\n      getTotalCharge() + \"</em></p>\\n\" +\r\n      \"<p>You earned <em>\" +\r\n      getTotalPoints() +\r\n      \" frequent renter points</em></p>\";\r\n    return result;\r\n\r\n  }\r\n\r\n  public double getTotalCharge() {\r\n    double total = 0;\r\n    for (Rental rental : rentals)\r\n      total += rental.getCharge();\r\n    return total;\r\n  }\r\n\r\n  public int getTotalPoints() {\r\n    int total = 0;\r\n    for (Rental rental : rentals)\r\n      total += rental.getPoints();\r\n    return total;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4),\r\n      0);\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForNewRelease() {\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      6.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      9.0,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getCharge(3),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForRegular() {\r\n    assertEquals(\r\n      2.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      2.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      3.5,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      5.0,\r\n      a.movie.w(\r\n        REGULAR).build().getCharge(4),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getPointsForChildrens() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        CHILDREN).build().getPoints(1));\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        CHILDREN).build().getPoints(2));\r\n  }\r\n\r\n  @Test\r\n  public void getPointsForNewRelease() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(1));\r\n    assertEquals(\r\n      2,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(2));\r\n    assertEquals(\r\n      2,\r\n      a.movie.w(\r\n        NEW_RELEASE).build().getPoints(3));\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getPointsForRegular() {\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        REGULAR).build().getPoints(1));\r\n    assertEquals(\r\n      1,\r\n      a.movie.w(\r\n        REGULAR).build().getPoints(2));\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.movie.w(UNKNOWN).build();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Movie {\r\n\r\n  public enum Type {\r\n    REGULAR, NEW_RELEASE, CHILDREN, UNKNOWN;\r\n  }\r\n\r\n  private String title;\r\n  Price price;\r\n\r\n  public Movie(\r\n    String title, Movie.Type priceCode) {\r\n    this.title = title;\r\n    setPriceCode(priceCode);\r\n  }\r\n\r\n  public String getTitle() {\r\n    return title;\r\n  }\r\n```\r\n\r\n```java\r\n  private void setPriceCode(\r\n    Movie.Type priceCode) {\r\n    switch (priceCode) {\r\n    case CHILDREN:\r\n      price = new ChildrensPrice();\r\n      break;\r\n    case NEW_RELEASE:\r\n      price = new NewReleasePrice();\r\n      break;\r\n    case REGULAR:\r\n      price = new RegularPrice();\r\n      break;\r\n    default:\r\n      throw new IllegalArgumentException(\r\n        \"invalid price code\");\r\n    }\r\n  }\r\n\r\n  public double getCharge(int daysRented) {\r\n    return price.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints(int daysRented) {\r\n    return price.getPoints(daysRented);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void\r\n  isStartedIfInStoreStateBased() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = a.store.w(movie).build();\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    assertEquals(\r\n      0, store.getAvailability(movie));\r\n  }\r\n\r\n  @Test\r\n  public void\r\n  doesNotStartIfNotAvailableStateBased() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental = a.rental.build();\r\n    Store store = a.store.build();\r\n    rental.start(store);\r\n    assertFalse(rental.isStarted());\r\n    assertEquals(\r\n      0, store.getAvailability(movie));\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void\r\n  isStartedIfInStoreInteractionBased() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    when(store.getAvailability(movie))\r\n      .thenReturn(1);\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    verify(store).remove(movie);\r\n  }\r\n\r\n  @Test\r\n  public void\r\n  notStartedIfUnavailableInteractionBased() {\r\n    Rental rental = a.rental.build();\r\n    Store store = mock(Store.class);\r\n    rental.start(store);\r\n    assertFalse(rental.isStarted());\r\n    verify(\r\n      store, never()).remove(\r\n        any(Movie.class));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Rental {\r\n\r\n  Movie movie;\r\n  private int daysRented;\r\n  private boolean started;\r\n\r\n  public Rental(\r\n    Movie movie, int daysRented) {\r\n    this.movie = movie;\r\n    this.daysRented = daysRented;\r\n  }\r\n\r\n  public Movie getMovie() {\r\n    return movie;\r\n  }\r\n\r\n  public int getDaysRented() {\r\n    return daysRented;\r\n  }\r\n\r\n  public double getCharge() {\r\n    return movie.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints() {\r\n    return movie.getPoints(daysRented);\r\n  }\r\n\r\n  public String getLineItem() {\r\n    return\r\n      movie.getTitle() + \" \" + getCharge();\r\n  }\r\n```\r\n\r\n```java\r\n  public boolean isStarted() {\r\n    return started;\r\n  }\r\n\r\n  public void start(Store store) {\r\n    if (store.getAvailability(movie) > 0) {\r\n      store.remove(movie);\r\n      this.started = true;\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Store {\r\n  private Map<Movie, Integer> movies;\r\n\r\n  public Store(Map<Movie, Integer> movies) {\r\n    this.movies = movies;\r\n  }\r\n\r\n  public int getAvailability(Movie movie) {\r\n    if (null == movies.get(movie))\r\n      return 0;\r\n    return movies.get(movie);\r\n  }\r\n\r\n  public boolean getAvailability(\r\n    Movie movie, int quantity) {\r\n    if (null == movies.get(movie))\r\n      return false;\r\n    return movies.get(movie) >= quantity;\r\n  }\r\n\r\n  public void remove(Movie movie) {\r\n    if (null == movies.get(movie))\r\n      return;\r\n    Integer count = movies.get(movie);\r\n    movies.put(movie, --count);\r\n  }\r\n}\r\n```\r\n# Improving Assertions \r\n## One Assertion Per Test \r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4),\r\n      0);\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5),\r\n      0);\r\n  }\r\n}\r\n```\r\n### Failure\r\n```java\r\npublic class ChildrensPrice extends Price {\r\n\r\n  @Override\r\n  public double getCharge(int daysRented) {\r\n    double amount = 1.5;\r\n    \r\n    if (daysRented > 2) // *was 3*\r\n      amount += (daysRented - 2) * 1.5;\r\n      \r\n    return amount;\r\n  }\r\n}\r\n```\r\n### Test Naming\r\n### The Solution\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens1Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens2Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens3Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForChildrens4Day() {\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens5Day() {\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5),\r\n      0);\r\n  }\r\n}\r\n```\r\n### Applying One Assertion Per Test To Behavior Verification Tests\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void rentalIsStartedIfInStore() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    when(store.getAvailability(movie))\r\n      .thenReturn(1);\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    verify(store).remove(movie);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void rentalIsStartedIfInStore() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    \r\n    when(store.getAvailability(movie, 1))\r\n      .thenReturn(true);\r\n    \r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n    verify(store).remove(movie);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void rentalIsStartedIfInStore() {\r\n    Rental rental = a.rental.build();\r\n    Store store = mock(Store.class);\r\n    when(store\r\n         .getAvailability(any(Movie.class)))\r\n      .thenReturn(1);\r\n    rental.start(store);\r\n    assertTrue(rental.isStarted());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class StoreTest {\r\n  @Test\r\n  public void storeWithNoAvailability() {\r\n    Store store = a.store.build();\r\n    assertEquals(\r\n      0,\r\n      store.getAvailability(\r\n        mock(Movie.class)));\r\n  }\r\n\r\n  @Test\r\n  public void storeWithAvailability() {\r\n    Movie movie = mock(Movie.class);\r\n    Store store =\r\n      a.store.w(movie, movie).build();\r\n    assertEquals(\r\n      2, store.getAvailability(movie));\r\n  }\r\n\r\n  @Test\r\n  public void\r\n  storeWithRemovedAvailability() {\r\n    Movie movie = mock(Movie.class);\r\n    Store store =\r\n      a.store.w(movie, movie).build();\r\n    store.remove(movie);\r\n    assertEquals(\r\n      1, store.getAvailability(movie));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void\r\n  storeAvailabilityIsModifiedOnRental() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store =\r\n      a.store.w(movie, movie).build();\r\n    rental.start(store);\r\n    a.rental.build().start(store);\r\n    assertEquals(\r\n      1, store.getAvailability(movie));\r\n  }\r\n}\r\n```\r\n### Thoughts On The Result\r\n## Implementation Overspecification \r\n```java\r\npublic class Customer {\r\n\r\n  private String name;\r\n  private List<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  public Customer(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n\r\n  \r\n  public String recentRentals() {\r\n    String result = \"Recent rentals:\";\r\n    for (int i=0;\r\n         i < rentals.size() && i < 3;\r\n         i++) {\r\n      result += \"\\n\" +\r\n        rentals.get(i).getMovie(\r\n          true).getTitle(\r\n            \"%s starring %s %s\", 2);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Movie godfather = mock(Movie.class);\r\n    when(godfather\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Godfather 4\");\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getMovie(true))\r\n      .thenReturn(godfather);\r\n    Movie lionKing = mock(Movie.class);\r\n    when(lionKing\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Lion King\");\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getMovie(true))\r\n      .thenReturn(lionKing);\r\n\r\n    assertEquals(\r\n      \"Recent rentals:\\nGodfather 4\\n\" +\r\n      \"Lion King\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().recentRentals());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void recentRentalsWith3Rentals() {\r\n    // same structure as above, with\r\n    // 8 more lines of mocking code,\r\n    // 25% longer expected value, and\r\n    // 2 lines of adding rentals to customer\r\n  }\r\n\r\n  @Test\r\n  public void recentRentalsWith4Rentals() {\r\n    // same structure as above, with\r\n    // 16 more lines of mocking code,\r\n    // 25% longer expected value, and\r\n    // 2 lines of adding rentals to customer\r\n  }\r\n}\r\n```\r\n### Flexible Argument Matchers\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Movie godfather = mock(Movie.class);\r\n    when(\r\n      godfather.getTitle(\r\n        \r\n        anyString(), anyInt()))\r\n      \r\n      .thenReturn(\"Godfather 4\");\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(\r\n      \r\n      godfatherRental.getMovie(anyBoolean()))\r\n      \r\n      .thenReturn(godfather);\r\n    Movie lionKing = mock(Movie.class);\r\n    when(\r\n      lionKing.getTitle(\r\n        \r\n        anyString(), anyInt()))\r\n      \r\n      .thenReturn(\"Lion King\");\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(\r\n      \r\n      lionKingRental.getMovie(anyBoolean()))\r\n      \r\n      .thenReturn(lionKing);\r\n\r\n    assertEquals(\r\n      \"Recent rentals:\\nGodfather 4\\n\" +\r\n      \"Lion King\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().recentRentals());\r\n  }\r\n}\r\n```\r\n### Default Return Values\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Movie godfather = mock(Movie.class);\r\n    \r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    \r\n    when(\r\n      godfatherRental.getMovie(anyBoolean()))\r\n      .thenReturn(godfather);\r\n    Movie lionKing = mock(Movie.class);\r\n    \r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    \r\n    when(\r\n      lionKingRental.getMovie(anyBoolean()))\r\n      .thenReturn(lionKing);\r\n\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().recentRentals());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getMovie(anyBoolean()))\r\n      .thenReturn(movie);\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\",\r\n      a.customer.w(rental, rental).build()\r\n      .recentRentals());\r\n  }\r\n}\r\n```\r\n### Law of Demeter\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Rental rental = mock(Rental.class);\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\",\r\n      a.customer.w(rental, rental).build()\r\n      .recentRentals());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Customer {\r\n\r\n  private String name;\r\n  private List<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  public Customer(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n\r\n  public String recentRentals() {\r\n    String result = \"Recent rentals:\";\r\n    for (int i=0;\r\n         i < rentals.size() && i < 3;\r\n         i++) {\r\n      result +=\r\n        \r\n        \"\\n\" + rentals.get(i).getTitle();\r\n      \r\n    }\r\n    return result;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentals0Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\",\r\n      a.customer.build().recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals1Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals2Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void recentRentals3Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals4Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n}\r\n```\r\n### Get Sociable\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void\r\n  recentRentalsWith3OrderedRentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\\nScarface\",\r\n      a.customer.w(\r\n        a.rental.w(a.movie.w(\"Godfather 4\")),\r\n        a.rental.w(a.movie.w(\"Lion King\")),\r\n        a.rental.w(a.movie.w(\"Scarface\")),\r\n        a.rental.w(a.movie.w(\"Notebook\")))\r\n      .build().recentRentals());\r\n  }\r\n}\r\n```\r\n### Comparison\r\n#### The (Previously Unwritten) Original Test with Four Rentals\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith4Rentals() {\r\n    Movie godfather = mock(Movie.class);\r\n    when(godfather\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Godfather 4\");\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getMovie(true))\r\n      .thenReturn(godfather);\r\n    Movie lionKing = mock(Movie.class);\r\n    when(lionKing\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Lion King\");\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getMovie(true))\r\n      .thenReturn(lionKing);\r\n    Movie scarface = mock(Movie.class);\r\n    when(scarface\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Scarface\");\r\n    Rental scarfaceRental =\r\n      mock(Rental.class);\r\n    when(scarfaceRental.getMovie(true))\r\n      .thenReturn(scarface);\r\n    Movie notebook = mock(Movie.class);\r\n    when(notebook\r\n         .getTitle(\"%s starring %s %s\", 2))\r\n      .thenReturn(\"Notebook\");\r\n    Rental notebookRental =\r\n      mock(Rental.class);\r\n    when(notebookRental.getMovie(true))\r\n      .thenReturn(notebook);\r\n\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\" +\r\n      \"\\nScarface\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build().recentRentals());\r\n  }\r\n}\r\n```\r\n#### The Sociable Unit Test and The Sparsely Specified Solitary Unit Tests\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void\r\n  recentRentalsWith3OrderedRentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\\nScarface\",\r\n      a.customer.w(\r\n        a.rental.w(a.movie.w(\"Godfather 4\")),\r\n        a.rental.w(a.movie.w(\"Lion King\")),\r\n        a.rental.w(a.movie.w(\"Scarface\")),\r\n        a.rental.w(a.movie.w(\"Notebook\")))\r\n      .build().recentRentals());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentals0Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\",\r\n      a.customer.build().recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals1Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals2Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void recentRentals3Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentals4Rental() {\r\n    assertEquals(\r\n      \"Recent rentals:\\nnull\\nnull\\nnull\",\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build()\r\n      .recentRentals());\r\n  }\r\n}\r\n```\r\n## Assert Last \r\n### Expect Exceptions via Try/Catch\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.movie.w(UNKNOWN).build();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void invalidTitle() {\r\n    try {\r\n      a.movie.w(UNKNOWN).build();\r\n      fail();\r\n    } catch (Exception ex) {\r\n      assertEquals(\r\n        IllegalArgumentException.class,\r\n        ex.getClass());\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void invalidTitle() {\r\n    Exception e = null;\r\n    try {\r\n      a.movie.w(UNKNOWN).build();\r\n    } catch (Exception ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      IllegalArgumentException.class,\r\n      e.getClass());\r\n  }\r\n}\r\n```\r\n### Assert Throws\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void invalidTitle() {\r\n    Runnable runnable = new Runnable() {\r\n        public void run() {\r\n          a.movie.w(UNKNOWN).build();\r\n        }\r\n      };\r\n    assertThrows(\r\n      IllegalArgumentException.class,\r\n      runnable);\r\n  }\r\n\r\n  public void assertThrows(\r\n    Class ex, Runnable runnable) {\r\n    Exception exThrown = null;\r\n    try {\r\n      runnable.run();\r\n    } catch (Exception exThrownActual) {\r\n      exThrown = exThrownActual;\r\n    }\r\n    if (null == exThrown)\r\n      fail(\"No exception thrown\");\r\n    else\r\n      assertEquals(ex, exThrown.getClass());\r\n  }\r\n}\r\n```\r\n### Mock Verification\r\n### Comparison\r\n```java\r\npublic class MovieTest {\r\n  Mockery context = new Mockery();\r\n\r\n  @Test\r\n  public void getPointsForDays() {\r\n    Movie movie = a.movie.build();\r\n    assertEquals(1, movie.getPoints(2));\r\n    assertEquals(1, movie.getPoints(3));\r\n  }\r\n\r\n  @Test\r\n  (expected=IllegalArgumentException.class)\r\n  public void invalidTitle() {\r\n    a.movie.w(UNKNOWN).build();\r\n  }\r\n\r\n  @Test\r\n  public void getPriceFromPriceInstance() {\r\n    final Price price =\r\n      context.mock(Price.class);\r\n    Movie movie = a.movie.build();\r\n    movie.setPrice(price);\r\n\r\n    context.checking(new Expectations() {{\r\n      oneOf(price).getCharge(3);\r\n    }});\r\n\r\n    movie.getCharge(3);\r\n    context.assertIsSatisfied();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getPoints2Days() {\r\n    assertEquals(\r\n      2, a.movie.build().getPoints(2));\r\n  }\r\n\r\n  @Test\r\n  public void getPoints3Days() {\r\n    assertEquals(\r\n      2, a.movie.build().getPoints(3));\r\n  }\r\n\r\n  @Test\r\n  public void invalidTitle() {\r\n    Runnable runnable = new Runnable() {\r\n        public void run() {\r\n          a.movie.w(UNKNOWN).build();\r\n        }\r\n      };\r\n    assertThrows(\r\n      IllegalArgumentException.class,\r\n      runnable);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getPriceFromPriceInstance() {\r\n    Price price = mock(Price.class);\r\n    Movie movie = a.movie.build();\r\n    movie.setPrice(price);\r\n    movie.getCharge(3);\r\n    verify(price).getCharge(3);\r\n  }\r\n}\r\n```\r\n## Expect Literals \r\n```java\r\npublic class RegularPriceTest {\r\n  @Test\r\n  public void chargeWithStaticVal() {\r\n    assertEquals(\r\n      basePrice,\r\n      a.regularPrice.build().getCharge(2),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void chargeWithLocalVal() {\r\n    int daysRented = 4;\r\n    double charge =\r\n      basePrice + (\r\n        daysRented - 2) * multiplier;\r\n    assertEquals(\r\n      charge,\r\n      a.regularPrice.build().getCharge(\r\n        daysRented),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void chargeWithLiteral() {\r\n    assertEquals(\r\n      5.0,\r\n      a.regularPrice.build().getCharge(4),\r\n      0);\r\n  }\r\n}\r\n```\r\n### Value Objects vs Expect Literals\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void compareDates() {\r\n    Movie godfather =\r\n      a.movie.w(\r\n        new Date(70261200000L)).build();\r\n    assertEquals(\r\n      \"1972-03-24\",\r\n      new SimpleDateFormat(\r\n        \"yyyy-MM-dd\").format(\r\n          godfather.releaseDate()));\r\n  }\r\n}\r\n```\r\n### Comparison\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void statementFor1Rental() {\r\n    Rental rental = mock(Rental.class);\r\n    Customer customer =\r\n      a.customer.w(rental).build();\r\n\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%sAmount \" +\r\n        \"owed is %s\\n\" +\r\n        \"You earned %s frequent \" +\r\n        \"renter points\",\r\n        customer,\r\n        rentalInfo(\r\n          \"\\t\", \"\", new Rental[] {rental})),\r\n      customer.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void statementFor2Rentals() {\r\n    Rental godfather = mock(Rental.class);\r\n    Rental scarface = mock(Rental.class);\r\n    Customer customer =\r\n      a.customer.w(\r\n        godfather, scarface).build();\r\n\r\n    assertEquals(\r\n      expStatement(\r\n        \"Rental record for %s\\n%sAmount \" +\r\n        \"owed is %s\\n\" +\r\n        \"You earned %s frequent \" +\r\n        \"renter points\",\r\n        customer,\r\n        rentalInfo(\r\n          \"\\t\", \"\", new Rental[] {\r\n            godfather, scarface})),\r\n      customer.statement());\r\n  }\r\n```\r\n\r\n```java\r\n  public static String rentalInfo(\r\n    String startsWith,\r\n    String endsWith,\r\n    Rental[] rentals) {\r\n    String result = \"\";\r\n    for (Rental rental : rentals)\r\n      result += String.format(\r\n        \"%s%s%s\\n\",\r\n        startsWith,\r\n        rental.getLineItem(),\r\n        endsWith);\r\n    return result;\r\n  }\r\n\r\n  public static String expStatement(\r\n    String formatStr,\r\n    Customer customer,\r\n    String rentalInfo) {\r\n    return String.format(\r\n      formatStr,\r\n      customer.getName(),\r\n      rentalInfo,\r\n      customer.getTotalCharge(),\r\n      customer.getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void statementFor1Rental() {\r\n    Customer customer =\r\n      a.customer.w(\r\n        mock(Rental.class)).build();\r\n\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\" +\r\n      \"\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      customer.statement());\r\n  }\r\n\r\n  @Test\r\n  public void statementFor2Rentals() {\r\n    Customer customer =\r\n      a.customer.w(\r\n        mock(Rental.class),\r\n        mock(Rental.class)).build();\r\n\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\"+\r\n      \"\\tnull\\n\" +\r\n      \"\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      customer.statement());\r\n  }\r\n}\r\n```\r\n## Negative Testing \r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void\r\n  storeMockNeverReceivesRemove() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    when(\r\n      store.getAvailability(\r\n        any(Movie.class)))\r\n      .thenReturn(0);\r\n    rental.start(store);\r\n    verify(store, never()).remove(movie);\r\n  }\r\n\r\n  @Test\r\n  public void failOnStoreRemove() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = new Store(\r\n      new HashMap<Movie,Integer>()) {\r\n        public void remove(Movie movie) {\r\n          fail();\r\n        }\r\n      };\r\n    rental.start(store);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void storeShouldNeverRemove() {\r\n    final boolean[] removeCalled = { false };\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = new Store(\r\n      new HashMap<Movie,Integer>()) {\r\n        public void remove(Movie movie) {\r\n          removeCalled[0] = true;\r\n        }\r\n      };\r\n    rental.start(store);\r\n    assertFalse(removeCalled[0]);\r\n  }\r\n}\r\n```\r\n### Strict Mocking\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void verifyStoreInteractions() {\r\n    Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = mock(Store.class);\r\n    rental.start(store);\r\n    verify(store).getAvailability(movie);\r\n    verifyNoMoreInteractions(store);\r\n  }\r\n}\r\n```\r\n### Just Be Sociable\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void\r\n  storeAvailabilityIsModifiedOnRental() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store =\r\n      a.store.w(movie, movie).build();\r\n    rental.start(store);\r\n    a.rental.build().start(store);\r\n    assertEquals(\r\n      1, store.getAvailability(movie));\r\n  }\r\n\r\n  \r\n  @Test\r\n  public void\r\n  storeAvailabilityIsUnmodified() {\r\n    Movie movie = a.movie.build();\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    Store store = a.store.build();\r\n    rental.start(store);\r\n    assertEquals(\r\n      0, store.getAvailability(movie));\r\n  }\r\n  \r\n}\r\n```\r\n## Hamcrest\r\n# Improving Test Cases\r\n## Too Much Magic\r\n### Self-shunt\r\n```java\r\npublic class RentalTest extends Store {\r\n  public static Movie movie =\r\n    mock(Movie.class);\r\n  private boolean removeCalled;\r\n\r\n  public RentalTest() {\r\n    super(new HashMap<Movie, Integer>() {{\r\n          this.put(movie, 2);\r\n        }});\r\n  }\r\n\r\n  @Test\r\n  public void removeIsCalled() {\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    rental.start(this);\r\n    assertEquals(true, removeCalled);\r\n  }\r\n\r\n  public void remove(Movie movie) {\r\n    super.remove(movie);\r\n    removeCalled = true;\r\n  }\r\n}\r\n```\r\n### Exceptional Success\r\n```java\r\npublic class RentalTest {\r\n  @Test(expected=RuntimeException.class)\r\n  public void removeIsCalled() {\r\n    final Movie movie = mock(Movie.class);\r\n    Rental rental =\r\n      a.rental.w(movie).build();\r\n    HashMap<Movie, Integer> movieMap =\r\n      new HashMap<Movie, Integer>() {{\r\n        this.put(movie, 2);\r\n      }};\r\n    Store store =\r\n      new Store(movieMap) {\r\n        public void remove(Movie movie) {\r\n          throw new\r\n            RuntimeException(\"success\");\r\n        }\r\n      };\r\n    rental.start(store);\r\n  }\r\n}\r\n```\r\n## Inline Setup \r\n```java\r\npublic class CustomerTest {\r\n  Rental godfatherRental;\r\n  Rental lionKingRental;\r\n  Rental scarfaceRental;\r\n  Rental notebookRental;\r\n  Customer twoRentals;\r\n  Customer fourRentals;\r\n\r\n  \r\n  @Before\r\n  public void init() {\r\n    godfatherRental = mock(Rental.class);\r\n    when(godfatherRental.getTitle())\r\n      .thenReturn(\"Godfather 4\");\r\n    when(godfatherRental.getCharge())\r\n      .thenReturn(3.0);\r\n    when(godfatherRental.getPoints())\r\n      .thenReturn(2);\r\n    lionKingRental = mock(Rental.class);\r\n    when(lionKingRental.getTitle())\r\n      .thenReturn(\"Lion King\");\r\n    when(lionKingRental.getCharge())\r\n      .thenReturn(2.0);\r\n    when(lionKingRental.getPoints())\r\n      .thenReturn(1);\r\n    scarfaceRental = mock(Rental.class);\r\n    when(scarfaceRental.getTitle())\r\n      .thenReturn(\"Scarface\");\r\n    when(scarfaceRental.getCharge())\r\n      .thenReturn(1.0);\r\n    when(scarfaceRental.getPoints())\r\n      .thenReturn(1);\r\n    notebookRental = mock(Rental.class);\r\n    when(notebookRental.getTitle())\r\n      .thenReturn(\"Notebook\");\r\n    when(notebookRental.getCharge())\r\n      .thenReturn(6.0);\r\n    when(notebookRental.getPoints())\r\n      .thenReturn(1);\r\n\r\n    twoRentals =\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build();\r\n\r\n    fourRentals =\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build();\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\",\r\n      twoRentals.recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentalsWith4Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\\nScarface\",\r\n      fourRentals.recentRentals());\r\n  }\r\n\r\n  \r\n  @Test\r\n  public void totalChargeWith2Rentals() {\r\n    assertEquals(\r\n      5.0,\r\n      twoRentals.getTotalCharge(),\r\n      0);\r\n  }\r\n  \r\n\r\n  @Test\r\n  public void totalChargeWith4Rentals() {\r\n    assertEquals(\r\n      12.0,\r\n      fourRentals.getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void totalPointsWith2Rentals() {\r\n    assertEquals(\r\n      3,\r\n      twoRentals.getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void totalPointsWith4Rentals() {\r\n    assertEquals(\r\n      5,\r\n      fourRentals.getTotalPoints());\r\n  }\r\n\r\n  \r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"Jim\", twoRentals.getName());\r\n  }\r\n  \r\n}\r\n```\r\n### Similar Creation and Action\r\n### Obviousness\r\n### Setup As An Optimization\r\n### Comparison\r\n```java\r\npublic class CustomerTest {\r\n  Rental godfatherRental;\r\n  Rental lionKingRental;\r\n  Rental scarfaceRental;\r\n  Rental notebookRental;\r\n  Customer twoRentals;\r\n  Customer fourRentals;\r\n\r\n  \r\n  @Before\r\n  public void init() {\r\n    godfatherRental = mock(Rental.class);\r\n    when(godfatherRental.getTitle())\r\n      .thenReturn(\"Godfather 4\");\r\n    when(godfatherRental.getCharge())\r\n      .thenReturn(3.0);\r\n    when(godfatherRental.getPoints())\r\n      .thenReturn(2);\r\n    lionKingRental = mock(Rental.class);\r\n    when(lionKingRental.getTitle())\r\n      .thenReturn(\"Lion King\");\r\n    when(lionKingRental.getCharge())\r\n      .thenReturn(2.0);\r\n    when(lionKingRental.getPoints())\r\n      .thenReturn(1);\r\n    scarfaceRental = mock(Rental.class);\r\n    when(scarfaceRental.getTitle())\r\n      .thenReturn(\"Scarface\");\r\n    when(scarfaceRental.getCharge())\r\n      .thenReturn(1.0);\r\n    when(scarfaceRental.getPoints())\r\n      .thenReturn(1);\r\n    notebookRental = mock(Rental.class);\r\n    when(notebookRental.getTitle())\r\n      .thenReturn(\"Notebook\");\r\n    when(notebookRental.getCharge())\r\n      .thenReturn(6.0);\r\n    when(notebookRental.getPoints())\r\n      .thenReturn(1);\r\n\r\n    twoRentals =\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build();\r\n\r\n    fourRentals =\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build();\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\",\r\n      twoRentals.recentRentals());\r\n  }\r\n\r\n  @Test\r\n  public void recentRentalsWith4Rentals() {\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\\nScarface\",\r\n      fourRentals.recentRentals());\r\n  }\r\n\r\n  \r\n  @Test\r\n  public void totalChargeWith2Rentals() {\r\n    assertEquals(\r\n      5.0,\r\n      twoRentals.getTotalCharge(),\r\n      0);\r\n  }\r\n  \r\n\r\n  @Test\r\n  public void totalChargeWith4Rentals() {\r\n    assertEquals(\r\n      12.0,\r\n      fourRentals.getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void totalPointsWith2Rentals() {\r\n    assertEquals(\r\n      3,\r\n      twoRentals.getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void totalPointsWith4Rentals() {\r\n    assertEquals(\r\n      5,\r\n      fourRentals.getTotalPoints());\r\n  }\r\n\r\n  \r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"Jim\", twoRentals.getName());\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void recentRentalsWith2Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getTitle())\r\n      .thenReturn(\"Godfather 4\");\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getTitle())\r\n      .thenReturn(\"Lion King\");\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().recentRentals());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void recentRentalsWith4Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getTitle())\r\n      .thenReturn(\"Godfather 4\");\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getTitle())\r\n      .thenReturn(\"Lion King\");\r\n    Rental scarfaceRental =\r\n      mock(Rental.class);\r\n    when(scarfaceRental.getTitle())\r\n      .thenReturn(\"Scarface\");\r\n    Rental notebookRental =\r\n      mock(Rental.class);\r\n    when(notebookRental.getTitle())\r\n      .thenReturn(\"Notebook\");\r\n    assertEquals(\r\n      \"Recent rentals:\"+\r\n      \"\\nGodfather 4\\nLion King\\nScarface\",\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build().recentRentals());\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n  @Test\r\n  public void totalChargeWith2Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getCharge())\r\n      .thenReturn(3.0);\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getCharge())\r\n      .thenReturn(2.0);\r\n    assertEquals(\r\n      5.0,\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n\r\n  @Test\r\n  public void totalChargeWith4Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getCharge())\r\n      .thenReturn(3.0);\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getCharge())\r\n      .thenReturn(2.0);\r\n    Rental scarfaceRental =\r\n      mock(Rental.class);\r\n    when(scarfaceRental.getCharge())\r\n      .thenReturn(1.0);\r\n    Rental notebookRental =\r\n      mock(Rental.class);\r\n    when(notebookRental.getCharge())\r\n      .thenReturn(6.0);\r\n    assertEquals(\r\n      12.0,\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build().getTotalCharge(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void totalPointsWith2Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getPoints())\r\n      .thenReturn(2);\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getPoints())\r\n      .thenReturn(1);\r\n    assertEquals(\r\n      3,\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental)\r\n      .build().getTotalPoints());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void totalPointsWith4Rentals() {\r\n    Rental godfatherRental =\r\n      mock(Rental.class);\r\n    when(godfatherRental.getPoints())\r\n      .thenReturn(2);\r\n    Rental lionKingRental =\r\n      mock(Rental.class);\r\n    when(lionKingRental.getPoints())\r\n      .thenReturn(1);\r\n    Rental scarfaceRental =\r\n      mock(Rental.class);\r\n    when(scarfaceRental.getPoints())\r\n      .thenReturn(1);\r\n    Rental notebookRental =\r\n      mock(Rental.class);\r\n    when(notebookRental.getPoints())\r\n      .thenReturn(1);\r\n    assertEquals(\r\n      5,\r\n      a.customer.w(\r\n        godfatherRental, lionKingRental,\r\n        scarfaceRental, notebookRental)\r\n      .build().getTotalPoints());\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n  @Test\r\n  public void getName() {\r\n    assertEquals(\r\n      \"Jim\",\r\n      a.customer.build().getName());\r\n  }\r\n  \r\n}\r\n```\r\n## Test Names\r\n# Improving Test Suites\r\n## Separating The Solitary From The Sociable\r\n### Increasing Consistency And Speed With Solitary Unit Tests\r\n#### Database and Filesystem Interaction\r\n```java\r\npublic class PidWriter {\r\n  public static void writePid(\r\n    String filename,\r\n    RuntimeMXBean bean) {\r\n    try {\r\n      writePidtoFile(filename, bean);\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n\r\n  private static void writePidtoFile(\r\n    String filename,\r\n    RuntimeMXBean bean) throws IOException {\r\n    FileWriter writer =\r\n      new FileWriter(filename);\r\n    try {\r\n      String runtimeName = bean.getName();\r\n      writer.write(\r\n        runtimeName.substring(\r\n          0, runtimeName.indexOf('@')));\r\n    }\r\n    finally {\r\n      writer.close();\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class PidWriterTest {\r\n  @Test\r\n  public void writePid() throws Exception {\r\n    RuntimeMXBean bean =\r\n      mock(RuntimeMXBean.class);\r\n    when(bean.getName()).thenReturn(\"12@X\");\r\n    PidWriter.writePid(\r\n      \"/tmp/sample.pid\", bean);\r\n    assertEquals(\r\n      \"12\",\r\n      Files.readAllLines(\r\n        Paths.get(\"/tmp/sample.pid\"),\r\n        Charset.defaultCharset()).get(0));\r\n  }\r\n}\r\n```\r\n#### The Solitary Unit Test\r\n```java\r\npublic class FileWriterGateway\r\n  extends FileWriter {\r\n\r\n  public static boolean disallowAccess =\r\n    false;\r\n\r\n  public FileWriterGateway(\r\n    String filename) throws IOException {\r\n    super(filename);\r\n    if (disallowAccess) {\r\n      throw new RuntimeException(\r\n        \"access disallowed\");\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class PidWriter {\r\n  public static void writePid(\r\n    String filename,\r\n    RuntimeMXBean bean) {\r\n    try {\r\n      writePidtoFile(filename, bean);\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n\r\n  private static void writePidtoFile(\r\n    String filename,\r\n    RuntimeMXBean bean) throws IOException {\r\n    \r\n    FileWriterGateway writer =\r\n      new FileWriterGateway(filename);\r\n    \r\n    try {\r\n      String runtimeName = bean.getName();\r\n      writer.write(\r\n        runtimeName.substring(\r\n          0, runtimeName.indexOf('@')));\r\n    }\r\n    finally {\r\n      writer.close();\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class PidWriterTest extends Solitary {\r\n  \r\n  @Test\r\n  public void writePid() throws Exception {\r\n    RuntimeMXBean bean =\r\n      mock(RuntimeMXBean.class);\r\n    when(bean.getName()).thenReturn(\"12@X\");\r\n    PidWriter.writePid(\r\n      \"/tmp/sample.pid\", bean);\r\n    assertEquals(\r\n      \"12\",\r\n      Files.readAllLines(\r\n        Paths.get(\"/tmp/sample.pid\"),\r\n        Charset.defaultCharset()).get(0));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Solitary {\r\n  @Before\r\n  public void setup() {\r\n    FileWriterGateway.disallowAccess = true;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class PidWriterTest extends Solitary {\r\n  @Test\r\n  public void writePid() throws Exception {\r\n    RuntimeMXBean bean =\r\n      mock(RuntimeMXBean.class);\r\n    when(bean.getName()).thenReturn(\"12@X\");\r\n    FileWriterGateway facade =\r\n      mock(FileWriterGateway.class);\r\n    PidWriter.writePid(facade, bean);\r\n    verify(facade).write(\"12\");\r\n  }\r\n}\r\n```\r\n```java\r\npublic class PidWriter {\r\n  public static void writePid(\r\n    String filename,\r\n    RuntimeMXBean bean) {\r\n    try {\r\n      FileWriterGateway writer =\r\n        new FileWriterGateway(filename);\r\n      writePid(writer, bean);\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n\r\n  \r\n  public static void writePid(\r\n    FileWriterGateway facade,\r\n    RuntimeMXBean bean) {\r\n    try {\r\n      writePidtoFile(facade, bean);\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n\r\n  private static void writePidtoFile(\r\n    FileWriterGateway facade,\r\n    RuntimeMXBean bean) throws IOException {\r\n    try {\r\n      String runtimeName = bean.getName();\r\n      facade.write(\r\n        runtimeName.substring(\r\n          0, runtimeName.indexOf('@')));\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n    finally {\r\n      facade.close();\r\n    }\r\n  }\r\n}\r\n```\r\n#### The Sociable Unit Test\r\n```java\r\npublic class PidWriterTest extends Sociable {\r\n  \r\n  @Test\r\n  public void writePid() throws Exception {\r\n    RuntimeMXBean bean =\r\n      mock(RuntimeMXBean.class);\r\n    when(bean.getName()).thenReturn(\"12@X\");\r\n    PidWriter.writePid(\r\n      \"/tmp/wewut/sample.pid\", bean);\r\n    assertEquals(\r\n      \"12\",\r\n      Files.readAllLines(\r\n        Paths.get(\"/tmp/wewut/sample.pid\"),\r\n        Charset.defaultCharset()).get(0));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Sociable {\r\n  @Before\r\n  public void setup()\r\n    throws Exception {\r\n    Process p;\r\n    p = Runtime.getRuntime().exec(\r\n      \"rm -rf /tmp/wewut\");\r\n    p.waitFor();\r\n    p = Runtime.getRuntime().exec(\r\n      \"mkdir -p /tmp/wewut\");\r\n    p.waitFor();\r\n  }\r\n}\r\n```\r\n#### Revisiting Concerns\r\n#### Time Interaction\r\n```java\r\npublic class Rental {\r\n\r\n  Movie movie;\r\n  private int daysRented;\r\n  private boolean started;\r\n  \r\n  private DateTime creationDateTime;\r\n  \r\n\r\n  public Rental(\r\n    Movie movie,\r\n    int daysRented,\r\n    \r\n    DateTime creationDateTime) {\r\n    \r\n    this.movie = movie;\r\n    this.daysRented = daysRented;\r\n    \r\n    this.creationDateTime = creationDateTime;\r\n    \r\n  }\r\n\r\n  public Rental(Movie movie, int daysRented) {\r\n    \r\n    this(movie, daysRented, new DateTime());\r\n    \r\n  }\r\n\r\n  \r\n  public DateTime getCreationDateTime() {\r\n    return creationDateTime;\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void creationDateTimeNow() {\r\n    DateTimeUtils.setCurrentMillisFixed(1000);\r\n    Rental rental = a.rental.build();\r\n    assertEquals(\r\n      1000,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n  }\r\n\r\n  @Test\r\n  public void creationDateTimeSet() {\r\n    Rental rental =\r\n      a.rental.w(\r\n        new DateTime(199)).build();\r\n    assertEquals(\r\n      199,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void creationDateTimeNow() {\r\n    DateTimeUtils.setCurrentMillisFixed(1000);\r\n    Rental rental = a.rental.build();\r\n    assertEquals(\r\n      1000,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n    \r\n    DateTimeUtils.setCurrentMillisSystem();\r\n    \r\n  }\r\n\r\n  @Test\r\n  public void creationDateTimeSet() {\r\n    Rental rental =\r\n      a.rental.w(\r\n        new DateTime(199)).build();\r\n    assertEquals(\r\n      199,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Solitary {\r\n  @Before\r\n  public void setup() {\r\n    FileWriterGateway.disallowAccess = true;\r\n    DateTimeUtils.setCurrentMillisFixed(1000);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest extends Solitary {\r\n  @Test\r\n  public void creationDateTimeNow() {\r\n    Rental rental = a.rental.build();\r\n    assertEquals(\r\n      1000,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n  }\r\n\r\n  @Test\r\n  public void creationDateTimeSet() {\r\n    Rental rental =\r\n      a.rental.w(\r\n        new DateTime(199)).build();\r\n    assertEquals(\r\n      199,\r\n      rental.getCreationDateTime()\r\n      .getMillis());\r\n  }\r\n}\r\n```\r\n#### Using Speed To Your Advantage\r\n### Avoiding Cascading Failures With Solitary Unit Tests\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\nAmount owed \" +\r\n      \"is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      a.customer.w(\r\n        a.rental).build().statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 18.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(\r\n        a.rental, a.rental).build()\r\n      .statement());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsGetTotalPoints() {\r\n    assertEquals(\r\n      0,\r\n      a.customer.build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalGetTotalPoints() {\r\n    assertEquals(\r\n      2,\r\n      a.customer.w(\r\n        a.rental).build().getTotalPoints());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoRentalsGetTotalPoints() {\r\n    assertEquals(\r\n      4,\r\n      a.customer.w(a.rental, a.rental)\r\n      .build()\r\n      .getTotalPoints());\r\n  }\r\n\r\n  // 3 tests for htmlStatement()\r\n  // left to the imagination\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void getPointsFromMovie() {\r\n    assertEquals(\r\n      2, a.rental.build().getPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getPoints() {\r\n    assertEquals(\r\n      2, a.movie.build().getPoints(2));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class NewReleasePrice extends Price {\r\n\r\n  @Override\r\n  public double getCharge(int daysRented) {\r\n    return daysRented * 3;\r\n  }\r\n\r\n  @Override\r\n  public int getPoints(int daysRented) {\r\n    if (daysRented > 1)\r\n      \r\n      return 3; // was 2\r\n    \r\n    return 1;\r\n  }\r\n}\r\n```\r\n#### Class Under Test\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\nAmount owed \" +\r\n      \"is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalStatement() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getLineItem())\r\n      .thenReturn(\"Godfather 4 9.0\");\r\n    when(rental.getCharge())\r\n      .thenReturn(9.0);\r\n    when(rental.getPoints())\r\n      .thenReturn(2);\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 9.0\\n\" +\r\n      \"You earned 2 frequent renter points\",\r\n      a.customer.w(rental).build()\r\n      .statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoRentalsStatement() {\r\n    Rental one = mock(Rental.class);\r\n    when(one.getLineItem())\r\n      .thenReturn(\"Godfather 4 9.0\");\r\n    when(one.getCharge())\r\n      .thenReturn(9.0);\r\n    when(one.getPoints())\r\n      .thenReturn(2);\r\n    Rental two = mock(Rental.class);\r\n    when(two.getLineItem())\r\n      .thenReturn(\"Godfather 4 9.0\");\r\n    when(two.getCharge())\r\n      .thenReturn(9.0);\r\n    when(two.getPoints())\r\n      .thenReturn(2);\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"\\tGodfather 4 9.0\\n\" +\r\n      \"Amount owed is 18.0\\n\" +\r\n      \"You earned 4 frequent renter points\",\r\n      a.customer.w(one, two).build()\r\n      .statement());\r\n  }\r\n\r\n  @Test\r\n  public void noRentalsGetTotalPoints() {\r\n    assertEquals(\r\n      0,\r\n      a.customer.build().getTotalPoints());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void oneRentalGetTotalPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints())\r\n      .thenReturn(2);\r\n    assertEquals(\r\n      2,\r\n      a.customer.w(\r\n        rental).build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsGetTotalPoints() {\r\n    Rental one = mock(Rental.class);\r\n    when(one.getPoints())\r\n      .thenReturn(2);\r\n    Rental two = mock(Rental.class);\r\n    when(two.getPoints())\r\n      .thenReturn(3);\r\n    assertEquals(\r\n      5,\r\n      a.customer.w(\r\n        one, two).build().getTotalPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void getPointsFromMovie() {\r\n    Movie movie = mock(Movie.class);\r\n    when(movie.getPoints(2))\r\n      .thenReturn(2);\r\n    assertEquals(\r\n      2,\r\n      a.rental.w(\r\n        2).w(movie).build().getPoints());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Rental {\r\n\r\n  Movie movie;\r\n  private int daysRented;\r\n  private boolean started;\r\n\r\n  public Rental(\r\n    Movie movie, int daysRented) {\r\n    this.movie = movie;\r\n    this.daysRented = daysRented;\r\n  }\r\n\r\n  public double getCharge() {\r\n    return movie.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints() {\r\n    return\r\n      movie.getPoints(daysRented, false);\r\n  }\r\n\r\n  \r\n  public int getPoints(boolean vipFlag) {\r\n    return\r\n      movie.getPoints(daysRented, vipFlag);\r\n  }\r\n  \r\n\r\n  public String getLineItem() {\r\n    return\r\n      movie.getTitle() + \" \" + getCharge();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void noRentalsStatement() {\r\n    assertEquals(\r\n      \"Rental record for Jim\\nAmount owed \" +\r\n      \"is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalStatement() {\r\n    Rental rental = mock(Rental.class);\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\tnull\\n\" +\r\n      \"Amount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        rental).build().statement());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsStatement() {\r\n    Rental rental = mock(Rental.class);\r\n    assertEquals(\r\n      \"Rental record for Jim\\n\\tnull\\n\" +\r\n      \"\\tnull\\nAmount owed is 0.0\\n\" +\r\n      \"You earned 0 frequent renter points\",\r\n      a.customer.w(\r\n        rental, rental).build().statement());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void noRentalsGetTotalPoints() {\r\n    assertEquals(\r\n      0,\r\n      a.customer.build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void oneRentalGetTotalPoints() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getPoints())\r\n      .thenReturn(2);\r\n    assertEquals(\r\n      2,\r\n      a.customer.w(\r\n        rental).build().getTotalPoints());\r\n  }\r\n\r\n  @Test\r\n  public void twoRentalsGetTotalPoints() {\r\n    Rental one = mock(Rental.class);\r\n    when(one.getPoints())\r\n      .thenReturn(2);\r\n    Rental two = mock(Rental.class);\r\n    when(two.getPoints())\r\n      .thenReturn(3);\r\n    assertEquals(\r\n      5,\r\n      a.customer.w(\r\n        one, two).build().getTotalPoints());\r\n  }\r\n}\r\n```\r\n#### Revisiting the Definition of Solitary Unit Test\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2),\r\n      0);\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3),\r\n      0);\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4),\r\n      0);\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5),\r\n      0);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Movie {\r\n\r\n  public enum Type {\r\n    REGULAR, NEW_RELEASE, CHILDREN, UNKNOWN;\r\n  }\r\n\r\n  private String title;\r\n  Price price;\r\n\r\n  public Movie(\r\n    String title, Movie.Type priceCode) {\r\n    this.title = title;\r\n    setPriceCode(priceCode);\r\n  }\r\n\r\n  public String getTitle() {\r\n    return title;\r\n  }\r\n```\r\n\r\n```java\r\n  private void setPriceCode(\r\n    Movie.Type priceCode) {\r\n    switch (priceCode) {\r\n    case CHILDREN:\r\n      price = new ChildrensPrice();\r\n      break;\r\n    case NEW_RELEASE:\r\n      price = new NewReleasePrice();\r\n      break;\r\n    case REGULAR:\r\n      price = new RegularPrice();\r\n      break;\r\n    default:\r\n      throw new IllegalArgumentException(\r\n        \"invalid price code\");\r\n    }\r\n  }\r\n\r\n  public double getCharge(int daysRented) {\r\n    return price.getCharge(daysRented);\r\n  }\r\n\r\n  public int getPoints(int daysRented) {\r\n    return price.getPoints(daysRented);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class ChildrensPrice extends Price {\r\n\r\n  @Override\r\n  public double getCharge(int daysRented) {\r\n    double amount = 1.5;\r\n    \r\n    if (daysRented > 2) // *was 3*\r\n      amount += (daysRented - 2) * 1.5;\r\n      \r\n    return amount;\r\n  }\r\n}\r\n```\r\n## Questionable Tests\r\n### Testing Language Features or Standard Library Classes\r\n```java\r\npublic class JavaTest {\r\n  @Test\r\n  public void arrayListGet() {\r\n    ArrayList<Integer> list =\r\n      new ArrayList<Integer>();\r\n    list.add(1);\r\n    assertEquals(\r\n      Integer.valueOf(1), list.get(0));\r\n  }\r\n\r\n  @Test\r\n  public void hashMapGet() {\r\n    HashMap<Integer, String> map =\r\n      new HashMap<Integer, String>();\r\n    map.put(1, \"a str\");\r\n    assertEquals(\"a str\", map.get(1));\r\n  }\r\n\r\n  @Test\r\n  public void throwCatch() {\r\n    Exception ex = null;\r\n    try {\r\n      throw new RuntimeException(\"ex\");\r\n    } catch (Exception eCaught) {\r\n      ex = eCaught;\r\n    }\r\n    assertEquals(\"ex\", ex.getMessage());\r\n  }\r\n}\r\n```\r\n### Testing Framework Features or Classes\r\n```java\r\npublic class JodaTest {\r\n  @Test\r\n  public void parseStr() {\r\n    assertEquals(\r\n      286347600000L,\r\n      DateTime.parse(\r\n        \"1979-01-28\").getMillis());\r\n  }\r\n}\r\n```\r\n### Testing Private Methods\r\n## Custom Assertions\r\n```java\r\npublic class Assert {\r\n  public static void assertThrows(\r\n    Class ex, Runnable runnable) {\r\n    Exception exThrown = null;\r\n    try {\r\n      runnable.run();\r\n    } catch (Exception exThrownActual) {\r\n      exThrown = exThrownActual;\r\n    }\r\n    if (null == exThrown)\r\n      fail(\"No exception thrown\");\r\n    else\r\n      assertEquals(ex, exThrown.getClass());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void invalidTitleCustomAssertion() {\r\n    assertThrows(\r\n      IllegalArgumentException.class,\r\n      () -> a.movie.w(UNKNOWN).build());\r\n  }\r\n\r\n  @Test\r\n  public void invalidTitleWithoutCA() {\r\n    Exception e = null;\r\n    try {\r\n      a.movie.w(UNKNOWN).build();\r\n    } catch (Exception ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      IllegalArgumentException.class,\r\n      e.getClass());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class AssertTest {\r\n  @Test\r\n  public void failIfNoThrow() {\r\n    AssertionError e = null;\r\n    try {\r\n      assertThrows(\r\n        IllegalArgumentException.class,\r\n        mock(Runnable.class));\r\n    } catch (AssertionError ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      AssertionError.class,\r\n      e.getClass());\r\n  }\r\n\r\n  @Test\r\n  public void failWithMessageIfNoThrow() {\r\n    AssertionError e = null;\r\n    try {\r\n      assertThrows(\r\n        IllegalArgumentException.class,\r\n        mock(Runnable.class));\r\n    } catch (AssertionError ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      \"No exception thrown\",\r\n      e.getMessage());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void failIfClassMismatch() {\r\n    AssertionError e = null;\r\n    try {\r\n      assertThrows(\r\n        IllegalArgumentException.class,\r\n        () -> {\r\n          throw new RuntimeException(\"\");});\r\n    } catch (AssertionError ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      AssertionError.class,\r\n      e.getClass());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void failWithMessageIfClassWrong() {\r\n    AssertionError e = null;\r\n    try {\r\n      assertThrows(\r\n        IllegalArgumentException.class,\r\n        () -> {\r\n          throw new RuntimeException(\"\");});\r\n    } catch (AssertionError ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(\r\n      \"expected:<class java.lang.\"+\r\n      \"IllegalArgumentException> \"+\r\n      \"but was:<class java.lang.\"+\r\n      \"RuntimeException>\",\r\n      e.getMessage());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void passWithCorrectException() {\r\n    AssertionError e = null;\r\n    try {\r\n      assertThrows(\r\n        RuntimeException.class,\r\n        () -> {\r\n          throw new RuntimeException(\"\");});\r\n    } catch (AssertionError ex) {\r\n      e = ex;\r\n    }\r\n    assertEquals(null, e);\r\n  }\r\n}\r\n```\r\n### Custom Assertions on Value Objects\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void compareDates() {\r\n    Movie godfather =\r\n      a.movie.w(\r\n        new Date(70261200000L)).build();\r\n    assertEquals(\r\n      \"1972-03-24\",\r\n      new SimpleDateFormat(\r\n        \"yyyy-MM-dd\").format(\r\n          godfather.releaseDate()));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Assert {\r\n  public static void assertDateWithFormat(\r\n    String expected,\r\n    String format,\r\n    Date dt) {\r\n    assertEquals(\r\n      expected,\r\n      new SimpleDateFormat(\r\n        format).format(dt));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void compareDates() {\r\n    Movie godfather =\r\n      a.movie.w(\r\n        new Date(70261200000L)).build();\r\n    assertDateWithFormat(\r\n      \"1972-03-24\",\r\n      \"yyyy-MM-dd\",\r\n      godfather.releaseDate());\r\n  }\r\n}\r\n```\r\n#### Custom Assertions for Money\r\n```java\r\npublic class Money {\r\n  private BigDecimal val;\r\n\r\n  public Money(double val) {\r\n    this(BigDecimal.valueOf(val));\r\n  }\r\n\r\n  public Money(BigDecimal val) {\r\n    this.val = val;\r\n  }\r\n\r\n  public Money add(double d) {\r\n    return new Money(\r\n      val.add(BigDecimal.valueOf(d)));\r\n  }\r\n\r\n  public Money add(Money m) {\r\n    return new Money(val.add(m.val));\r\n  }\r\n\r\n  public double toDouble() {\r\n    return val\r\n      .setScale(2, BigDecimal.ROUND_HALF_UP)\r\n      .doubleValue();\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MoneyTest {\r\n  @Test\r\n  public void doubleAddition() {\r\n    assertEquals(\r\n      11.0,\r\n      a.money.w(1.0).build().add(\r\n        10.0).toDouble(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void moneyAddition() {\r\n    assertEquals(\r\n      11.0,\r\n      a.money.w(1.0).build().add(\r\n        a.money.w(10.0).build()).toDouble(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void oneDecimalToDouble() {\r\n    assertEquals(\r\n      1.0,\r\n      a.money.w(1.0).build().toDouble(),\r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void twoDecimalToDouble() {\r\n    assertEquals(\r\n      1.12,\r\n      a.money.w(1.12).build().toDouble(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void thrDecimalUpToDouble() {\r\n    assertEquals(\r\n      1.12,\r\n      a.money.w(1.123).build().toDouble(),\r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void thrDecimalDownToDouble() {\r\n    assertEquals(\r\n      1.13,\r\n      a.money.w(1.125).build().toDouble(),\r\n      0);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Movie {\r\n\r\n  public enum Type {\r\n    REGULAR, NEW_RELEASE, CHILDREN;\r\n  }\r\n\r\n  private String title;\r\n  Price price;\r\n\r\n  public Movie(\r\n    String title, Movie.Type priceCode) {\r\n    this.title = title;\r\n    setPriceCode(priceCode);\r\n  }\r\n\r\n  private void setPriceCode(\r\n    Movie.Type priceCode) {\r\n    switch (priceCode) {\r\n    case CHILDREN:\r\n      price = new ChildrensPrice();\r\n      break;\r\n    case NEW_RELEASE:\r\n      price = new NewReleasePrice();\r\n      break;\r\n    case REGULAR:\r\n      price = new RegularPrice();\r\n      break;\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  \r\n  public Money getCharge(int daysRented) {\r\n    return price.getCharge(daysRented);\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens1Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(\r\n          \r\n          1).toDouble(),\r\n      \r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens2Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(\r\n          \r\n          2).toDouble(),\r\n      \r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens3Day() {\r\n    assertEquals(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(\r\n          \r\n          3).toDouble(),\r\n      \r\n      0);\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForChildrens4Day() {\r\n    assertEquals(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(\r\n          \r\n          4).toDouble(),\r\n      \r\n      0);\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens5Day() {\r\n    assertEquals(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(\r\n          \r\n          5).toDouble(),\r\n      \r\n      0);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Assert {\r\n  public static void assertMoney(\r\n    double d, Money m) {\r\n    assertEquals(d, m.toDouble(), 0);\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MoneyTest {\r\n  @Test\r\n  public void doubleAddition() {\r\n    assertMoney(\r\n      11.0, a.money.w(1.0).build().add(10.0));\r\n  }\r\n\r\n  @Test\r\n  public void moneyAddition() {\r\n    assertMoney(\r\n      11.0,\r\n      a.money.w(1.0).build().add(\r\n        a.money.w(10.0).build()));\r\n  }\r\n\r\n  @Test\r\n  public void oneDecimalToDouble() {\r\n    assertMoney(\r\n      1.0, a.money.w(1.0).build());\r\n  }\r\n\r\n  @Test\r\n  public void twoDecimalToDouble() {\r\n    assertMoney(\r\n      1.12, a.money.w(1.12).build());\r\n  }\r\n\r\n  @Test\r\n  public void thrDecimalUpToDouble() {\r\n    assertMoney(\r\n      1.12, a.money.w(1.123).build());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void thrDecimalDownToDouble() {\r\n    assertMoney(\r\n      1.13, a.money.w(1.125).build());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class MovieTest {\r\n  @Test\r\n  public void getChargeForChildrens1Day() {\r\n    assertMoney(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(1));\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens2Day() {\r\n    assertMoney(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(2));\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens3Day() {\r\n    assertMoney(\r\n      1.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(3));\r\n  }\r\n\r\n  @Test\r\n  public void getChargeForChildrens4Day() {\r\n    assertMoney(\r\n      3.0,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(4));\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void getChargeForChildrens5Day() {\r\n    assertMoney(\r\n      4.5,\r\n      a.movie.w(\r\n        CHILDREN).build().getCharge(5));\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Rental {\r\n\r\n  Movie movie;\r\n  private int daysRented;\r\n\r\n  public Rental(\r\n    Movie movie, int daysRented) {\r\n    this.movie = movie;\r\n    this.daysRented = daysRented;\r\n  }\r\n\r\n  \r\n  public Money getCharge() {\r\n    return movie.getCharge(daysRented);\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class RentalTest {\r\n  @Test\r\n  public void getChargeFromMovie() {\r\n    Movie movie = mock(Movie.class);\r\n    when(movie.getCharge(any(Integer.class)))\r\n      .thenReturn(a.money.w(1.5).build());\r\n    assertMoney(\r\n      1.5,\r\n      a.rental.w(movie).build().getCharge());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Customer {\r\n\r\n  private List<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n\r\n  \r\n  public Money getTotalCharge() {\r\n    Money total = new Money(0.0);\r\n    for (Rental rental : rentals)\r\n      total = total.add(rental.getCharge());\r\n    return total;\r\n  }\r\n  \r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForNoRentals() {\r\n    assertMoney(\r\n      0.0,\r\n      a.customer.build().getTotalCharge());\r\n  }\r\n\r\n  @Test\r\n  public void chargeForOneRental() {\r\n    Rental rental = mock(Rental.class);\r\n    when(rental.getCharge())\r\n      .thenReturn(a.money.w(2.0).build());\r\n    assertMoney(\r\n      2.0,\r\n      a.customer.w(\r\n        rental).build().getTotalCharge());\r\n  }\r\n```\r\n\r\n```java\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    Rental rental1 = mock(Rental.class);\r\n    when(rental1.getCharge())\r\n      .thenReturn(a.money.w(2.2).build());\r\n    Rental rental2 = mock(Rental.class);\r\n    when(rental2.getCharge())\r\n      .thenReturn(a.money.w(3.5).build());\r\n    assertMoney(\r\n      5.7,\r\n      a.customer.w(\r\n        rental1,\r\n        rental2).build().getTotalCharge());\r\n  }\r\n}\r\n```\r\n## Global Definition\r\n### Creating Domain Objects Within Tests \r\n#### New Is The New New\r\n#### Object Mother\r\n#### Test Data Builders\r\n#### Test Data Builder Syntax\r\n#### Test Data Builder Guidelines Revisited\r\n```java\r\npublic class a {\r\n  public static CustomerBuilder customer =\r\n    new CustomerBuilder();\r\n  public static MoneyBuilder money =\r\n    new MoneyBuilder();\r\n\r\n  public static class CustomerBuilder {\r\n    Rental[] rentals;\r\n\r\n    CustomerBuilder() {\r\n      this(new Rental[0]);\r\n    }\r\n\r\n    CustomerBuilder(Rental[] rentals) {\r\n      this.rentals = rentals;\r\n    }\r\n\r\n    public CustomerBuilder w(\r\n      Rental... rentals) {\r\n      return new CustomerBuilder(rentals);\r\n    }\r\n\r\n    public Customer build() {\r\n      Customer result = new Customer();\r\n      for (Rental rental : rentals) {\r\n        result.addRental(rental);\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n```\r\n\r\n```java\r\n  public static class MoneyBuilder {\r\n    final double val;\r\n\r\n    MoneyBuilder() {\r\n      this(1.0);\r\n    }\r\n\r\n    MoneyBuilder(double val) {\r\n      this.val = val;\r\n    }\r\n\r\n    public MoneyBuilder w(double val) {\r\n      return new MoneyBuilder(val);\r\n    }\r\n\r\n    public Money build() {\r\n      return new Money(val);\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    Rental rental1 = mock(Rental.class);\r\n    when(rental1.getCharge())\r\n      .thenReturn(a.money.w(2.2).build());\r\n    Rental rental2 = mock(Rental.class);\r\n    when(rental2.getCharge())\r\n      .thenReturn(a.money.w(3.5).build());\r\n    assertMoney(\r\n      5.7,\r\n      a.customer.w(\r\n        rental1,\r\n        rental2).build().getTotalCharge());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    Rental rental1 = mock(Rental.class);\r\n    when(rental1.getCharge())\r\n      .thenReturn(a.money.w(2.2).build());\r\n    Rental rental2 = mock(Rental.class);\r\n    when(rental2.getCharge())\r\n      .thenReturn(a.money.w(3.5).build());\r\n    \r\n    Customer customer = a.customer.build();\r\n    customer.addRental(rental1);\r\n    customer.addRental(rental2);\r\n    \r\n    assertMoney(\r\n      5.7, customer.getTotalCharge());\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Customer {\r\n  private List<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  public void addRental(Rental rental) {\r\n    rentals.add(rental);\r\n  }\r\n\r\n  public Money getTotalCharge() {\r\n    Money total = new Money(0.0);\r\n    for (Rental rental : rentals)\r\n      total = total.add(rental.getCharge());\r\n    return total;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class Customer {\r\n  private ArrayList<Rental> rentals =\r\n    new ArrayList<Rental>();\r\n\r\n  \r\n  public Customer addRentals(\r\n    Rental... newRentals) {\r\n    rentals.addAll(Arrays.asList(newRentals));\r\n    return this;\r\n  }\r\n  \r\n\r\n  public Money getTotalCharge() {\r\n    Money total = new Money(0.0);\r\n    for (Rental rental : rentals)\r\n      total = total.add(rental.getCharge());\r\n    return total;\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    Rental rental1 = mock(Rental.class);\r\n    when(rental1.getCharge())\r\n      .thenReturn(a.money.w(2.2).build());\r\n    Rental rental2 = mock(Rental.class);\r\n    when(rental2.getCharge())\r\n      .thenReturn(a.money.w(3.5).build());\r\n    assertMoney(\r\n      5.7,\r\n      \r\n      a.customer.build().addRentals(\r\n        rental1, rental2).getTotalCharge());\r\n    \r\n  }\r\n}\r\n```\r\n### Creating Stubs\r\n#### Create, Stub, Return\r\n```java\r\npublic class MockitoExtensions {\r\n  @SuppressWarnings(\"unchecked\")\r\n  public static <T> T create(\r\n    Object methodCall) {\r\n    when(methodCall)\r\n      .thenReturn(\r\n        StubBuilder.current.returnValue);\r\n    return (T)\r\n      StubBuilder.current.mockInstance;\r\n  }\r\n  public static <T> StubBuilder<T> stub(\r\n    Class<T> klass) {\r\n    return new StubBuilder<T>(mock(klass));\r\n  }\r\n  public static class StubBuilder<T> {\r\n    public static StubBuilder current;\r\n    public final T mockInstance;\r\n    private Object returnValue;\r\n    public StubBuilder(T mockInstance) {\r\n      current = this;\r\n      this.mockInstance = mockInstance;\r\n    }\r\n    public T from() {\r\n      return mockInstance;\r\n    }\r\n    public StubBuilder<T> returning(\r\n      Object returnValue) {\r\n      this.returnValue = returnValue;\r\n      return this;\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    assertMoney(\r\n      5.7,\r\n      a.customer.build().addRentals(\r\n        create(\r\n          stub(Rental.class)\r\n          .returning(a.money.w(2.2).build())\r\n          .from().getCharge()),\r\n        create(\r\n          stub(Rental.class)\r\n          .returning(a.money.w(3.5).build())\r\n          .from().getCharge()))\r\n      .getTotalCharge());\r\n  }\r\n}\r\n```\r\n#### Create, Lambda, Return\r\n```java\r\npublic class MockitoExtensions {\r\n  public static <T> T stub(\r\n    Class<T> klass,\r\n    Function<T,Object> f,\r\n    Object returnVal) {\r\n    try {\r\n      T result = mock(klass);\r\n      when(f.apply(result))\r\n        .thenReturn(returnVal);\r\n      return result;\r\n    } catch (Exception e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n}\r\n```\r\n```java\r\npublic class CustomerTest {\r\n  @Test\r\n  public void chargeForTwoRentals() {\r\n    assertMoney(\r\n      5.7,\r\n      a.customer.build().addRentals(\r\n        \r\n        stub(Rental.class,\r\n             s -> s.getCharge(),\r\n             a.money.w(2.2).build()),\r\n        stub(Rental.class,\r\n             s -> s.getCharge(),\r\n             a.money.w(3.5).build()))\r\n      \r\n      .getTotalCharge());\r\n  }\r\n}\r\n```\r\n### More Than Creation\r\n# Closing Thoughts\r\n## Broad Stack Tests \r\n## Test Pyramid\r\n## Final Thoughts On ROI\r\n## More...\r\n# Foreword\r\n\r\n\r\n# Preface\r\n### Why Test?\r\n### Who Should Read This Book\r\n### Building on the Foundations Laid by Others\r\n# More...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}